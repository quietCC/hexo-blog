<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zookeeper源码分析</title>
      <link href="/2021/05/12/Zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/12/Zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dc58f264b32afcb14da68e61f531a80faafbabf7e7ddc0a598cf4af91517d544"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> 源码 </tag>
            
            <tag> CAP </tag>
            
            <tag> Paxos </tag>
            
            <tag> Zab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-Flume</title>
      <link href="/2021/01/03/Interview-Flume/"/>
      <url>/2021/01/03/Interview-Flume/</url>
      
        <content type="html"><![CDATA[<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><h2 id="taildir-source"><a href="#taildir-source" class="headerlink" title="taildir source"></a>taildir source</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><ol><li>断点续传, 多目录</li><li>apache 1.7, cdh 1.6</li><li>自定义source</li><li>不会丢数据, 有可能会重复</li><li>(自己处理)事务, 影响效率, 在企业中几乎不用</li><li>(找兄弟)下一级处理, dwd, redis, spark, flink, groupby ,开窗取第一条</li></ol></div></div><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><ul><li><p>memory channel</p><p>存储在内存中, 可靠性低, 效率高</p></li><li><p>file channel</p><p>磁盘, 可靠性高, 效率低</p></li><li><p>kafka channel</p><p>kafka磁盘, 可靠性高, 效率较高</p><blockquote><p>kafka channel &gt; memory channel + kafka sink</p><p>apache 1.6就有了, 但是又bug, 但是存在脏数据  event(header+body)</p></blockquote></li><li><p> 在生产环境中该怎么选?</p></li></ul><p>  如果下一级是kafka, 选择kafka channel</p><p>  如果不是kafka channel, 追求可靠性 file channel 和钱相关的</p><p>  追求效率 memory channel 普通日志</p></div></div><h2 id="hdfs-sink"><a href="#hdfs-sink" class="headerlink" title="hdfs sink"></a>hdfs sink</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>小文件的处理</p><p>大小设置为128m,  时间设置为30分钟, 控制event个数, 设置为0 , 禁止掉</p></div></div><h1 id="三个器"><a href="#三个器" class="headerlink" title="三个器"></a>三个器</h1><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ol><li><p>ETL拦截器做了什么事情?</p><p>判断json是否完整</p></li><li><p>ETL是否可以不用?</p><p>可以, 找兄弟, dwd, spark, flink….</p></li><li><p>时间戳拦截器解决了什么?</p><p>解决了零点漂移问题, 解析json数据中的时间, </p></li><li><p>时间戳拦截器是否可以不用?</p><p>最好使用, 不然很有可能有较大的误差</p></li><li><p>自定义拦截器步骤</p><ul><li>定义类, 实现interceptor接口, 重写四个方法, 但event, 多event, 开始, 关闭, builder方法</li><li>打包, 上传到flume.lib, 在配置文件中使用  全类名$builder</li></ul></li></ol><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>replicating:  默认的选择器, 将数据发送到下一级的所有通道</p><p>Multipexing: 可以有选择性的发向指定的通道</p></div></div><h2 id="监控器"><a href="#监控器" class="headerlink" title="监控器"></a>监控器</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>使用Canglia监控器, 监控Flume尝试提交的次数远远大于成功的次数, 说明Flume的运行较差</p><p>解决方法:</p><ol><li>flume自身默认内存为2000m, 增加flume内存, 在flume-env.sh配置文件设置flume的内存大小为4到6G</li><li>增加日志服务器, 日志采集服务器大概需要内存为2G, flume设置为6G, 所以说大小设置为8G, 有的企业会设置为16G</li></ol></div></div><h1 id="挂了以及优化"><a href="#挂了以及优化" class="headerlink" title="挂了以及优化"></a>挂了以及优化</h1><h2 id="挂了"><a href="#挂了" class="headerlink" title="挂了"></a>挂了</h2><p>memory channel  有可能丢失数据, 100个event</p><p>file channel  100万个event</p><p>taildir source 不丢, 可能有数据重复</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ol><li><p>file channel 能配置多目录</p></li><li><p>hdfs sink  小文件的处理</p><p>大小设置为128m,  时间设置为30分钟, 控制event个数, 设置为0 , 禁止掉</p></li><li><p>监控器使用Ganglia监控器, 当尝试提交的次数远远大于 提交成功的次数的时候, 说明存在异常. flume的默认内存大小为2000m, 设置为4-6G</p></li><li><p>增加日志服务器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse</title>
      <link href="/2010/12/12/ClickHouse/"/>
      <url>/2010/12/12/ClickHouse/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>Click House是俄罗斯的Yandex与2016年开源的列式存储数据库(DBMS), 使用c++语言编写</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>固定长度的整形, 包括有符号整型和无符号整型</p><p><strong>整型范围(-2<sup>n-1</sup> ~ 2<sup>n-1</sup>-1 )</strong></p><p>Int8                       [-128 : 127]</p><p>Int16                     [-32768 : 32767]</p><p>Int32                     [-2147483648 : 2147483647]</p><p>Int64                     [-9223372036854775808 : 9223372036854775807]</p><p><strong>无符号整型范围(0 ~ 2 <sup>n-1</sup>-1)</strong></p><p>UInt8                      [0 : 255]</p><p>UInt16                    [0 : 65535]</p><p>UInt32                    [0 : 4294967295]</p><p>UInt64                    [0 : 18446744073709551615]</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>Float32                float</p><p>Float64                double</p><blockquote><p>尽可能的以整数的形式存储数据, 例如, 将固定精度的数字转换为整数型, 如用时的毫秒为单位表示, 因为浮点型进行计算时可能会引起四舍五入的误差</p></blockquote><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>没有单独的类型来存储布尔值, 可以使用UInt8类型, 取值限制为0或者1</p><h2 id="Decimal型"><a href="#Decimal型" class="headerlink" title="Decimal型"></a>Decimal型</h2><p>有符号的浮点数, 可以在加减乘运算的时候保持精度, 对于除法, 最低有效数字会被丢弃.</p><p>有三种声明: </p><ul><li>Decimal32(s)，相当于Decimal(9-s,s)，有效位数为1~9</li><li>Decimal64(s)，相当于Decimal(18-s,s)，有效位数为1~18</li><li>Decimal128(s)，相当于Decimal(38-s,s)，有效位数为1~38</li></ul><p>s标识小数位</p><blockquote><p><strong>使用场景</strong></p><p>一般金额字段, 汇率, 利率等为了保证小数点精度, 使用Decimal进行存储</p></blockquote><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>String</p><p>字符串可以任意长度, 它可以包含任意的字符集, 包含空字节</p></li><li><p>FixedString(N)</p><p>固定长度N的字符串, N必须是严格的正自然数, 当服务端读取长度小于N的字符串的时候, 通过在字符串末尾添加空字节来达到N字节长度, 当服务端读取长度大于N的字符串的时候, 将会返回错误信息</p><p>与String相比, 极少会使用FixedString, 因为使用起来不是很方便</p></li></ul><blockquote><p>使用场景: 名称, 文字描述, 字符型编码, 固定长度的可以保存一些定长的内容, 不比如一些编码, 性别等, 但是考虑到一定的变化风险, 带来的收益不够明显, 所以定长字符串使用的意义有限</p></blockquote><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>包括Enum8和Enum16类型, Enum保存’String’=integer的对应关系</p><p>Enum8 用 ‘String’ = Int8 对描述</p><p>Enum16 用 ‘String’ = Int16 对描述</p><p><strong>🌰用法演示:</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_enum</span><br><span class="line">(</span><br><span class="line">    x Enum8(<span class="string">&#x27;hello&#x27;</span> <span class="operator">=</span> <span class="number">1</span>, <span class="string">&#x27;world&#x27;</span> <span class="operator">=</span> <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> TinyLog;</span><br></pre></td></tr></table></figure><ul><li><p>这个x列只能存储类型中定义中列出的值: ‘hello’或者’world’</p></li><li><p>如果尝试保存其他的任何值, clickhouse会抛出异常</p></li><li><p>如果需要看到对应行的数值, 则必须将Enum值转换为整数类型</p></li></ul><blockquote><p><strong>使用场景</strong></p><p>对于一些状态, 类型的字段算是一种空间优化, 也算是一种数据的约束. 但是实际使用中往往因为数据内容的变化ua增加一定的维护成本, 甚至是数据丢失的问题, 所以谨慎使用.</p></blockquote><h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><p>目前ClickHouse有三种时间类型</p><ul><li>Date接受<code>年-月-日</code>的字符串, 比如 ‘1999-09-09’</li><li>Datetime接受<code> 年-月-日 时-分-秒</code>的字符串, 比如 ‘1999-09-09 09:09:09’</li><li>Datetime64 接受<code> 年-月-日 时-分-秒.亚秒</code>的字符串吗, 比如 ‘1999-09-09 09:09:09.99’</li></ul><p>日期类型, 用两个字节存储, 表示从1970-01-01到当前的日期值</p><p>还有很多的数据结构, 可以参考官方文档</p><p><a href="https://clickhouse.yandex/docs/zh/data_types/">官方文档</a></p><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>&emsp;Array(T): 由T类型元素组成的数组</p><p>&emsp;Ｔ可以时任意类型, 包括数组类型, 但是不推荐使用多维数组 ,ClickHouse对多维数组的支持有限, 例如, 不能再MergeTree表中存储多维数组.</p><p>创建数组的方式1, 使用array函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">AS</span> x, toTypeName(x) ;</span><br></pre></td></tr></table></figure><p>创建数组的方式2, 使用方括号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">AS</span> x, toTypeName(x);</span><br></pre></td></tr></table></figure><h1 id="表引擎"><a href="#表引擎" class="headerlink" title="表引擎"></a>表引擎</h1><h2 id="表引擎的使用"><a href="#表引擎的使用" class="headerlink" title="表引擎的使用"></a>表引擎的使用</h2><p>表引擎时ClickHouse的一大特色, 可以说, 表引擎决定了如何存储表的数据. 包括: </p><ul><li>数据的存储方式和位置, 写到哪里以及从哪里读取数据</li><li>支持那些查询以及如何支持</li><li>并发数据访问</li><li>索引的使用(如果存在)</li><li>是否可以执行多线程请求</li><li>数据复制参数</li></ul><p>表引擎的使用方式就是必须显示的在创建表时定义该表使用的引擎, 以及引擎使用的相关参数</p><blockquote><p>引擎的名称大小写敏感</p></blockquote><h2 id="TinyLog"><a href="#TinyLog" class="headerlink" title="TinyLog"></a>TinyLog</h2><p>&emsp;以列文件的形式保存在磁盘上, 不支持索引, 没有并发控制. 一般保存少量数据的小表, 生产环境上作用有限, 可以用于平时练习测试的时候使用</p><p>如: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_tinylog ( id String, name String) engine<span class="operator">=</span>TinyLog;</span><br></pre></td></tr></table></figure><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>&emsp;内存引擎, 数据以未压缩的原始形式直接保存在内存之中, 服务器重启数据就会消失. 读写操作不会相互阻塞, 不支持索引, 简单查询下有非常非常高的性能表现(超过10G/s)</p><p>&emsp;一般用到它的地方不多, 除了用来测试, 就是在需要非常高的性能, 同时数据量又不大的情况下, 上限大概1亿行的场景</p><h2 id="MergeTree"><a href="#MergeTree" class="headerlink" title="MergeTree"></a>MergeTree</h2><p>&emsp;ClickHouse中最强大的表引擎当属MergeTree(合并树)引擎以及该系列(*MergeTree)中的其他引擎, 支持索引和分区, 地位可以相当与innodb之与Mysql, 而基于MergeTree, 还衍生除了很多小弟, 也是非常有特色的引擎.</p><ul><li><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order_mt(</span><br><span class="line">    id UInt32,</span><br><span class="line">    sku_id String,</span><br><span class="line">    total_amount <span class="type">Decimal</span>(<span class="number">16</span>,<span class="number">2</span>),</span><br><span class="line">    create_time  Datetime</span><br><span class="line"> ) engine <span class="operator">=</span>MergeTree</span><br><span class="line">   <span class="keyword">partition</span> <span class="keyword">by</span> toYYYYMMDD(create_time)</span><br><span class="line">   <span class="keyword">primary</span> key (id)</span><br><span class="line">   <span class="keyword">order</span> <span class="keyword">by</span> (id,sku_id);</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  t_order_mt <span class="keyword">values</span></span><br><span class="line">(<span class="number">101</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>) ,</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 11:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">12000.00</span>,<span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;MergeTree其实还有很多的参数, 绝大多数可以使用默认值即可, 但是三个参数是更加重要的, 也涉及了关于MergeTree的很多概念</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2010/12/12/ElasticSearch/"/>
      <url>/2010/12/12/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    ElasticSearch 是一个基于Lucene的搜索服务器. 它提供了一个分布式多用户能力的全文搜索引擎, 基于Restful web接口. ElasticSearch是用Java开发的, 并作为Apache许可条款下的开放源码发布, 是当前流行的企业级搜索引擎.</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>为用户提供按关键字查询的全文搜索的功能</li><li>实现企业海量数据的处理分析的解决方案. 大数据领域的重要的一份子, 如著名的ELK框架</li><li>作为OLAP数据库, 对数据进行统计分析</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="天然的分布式数据库"><a href="#天然的分布式数据库" class="headerlink" title="天然的分布式数据库"></a>天然的分布式数据库</h3><p>​    es将数据划分成为多个shard, 下面的图中P0-P2, 多个shard, 可以组成一组完整的数据, 这些shard可以分布在集群中的各个机器的节点中. 随着数据的不断增加, 集群可以增加多个分片, 将多个分片放在多个机子上, 达到负载均衡和横向扩展.</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030141411975.png"></p><h3 id="天然索引之倒排索引"><a href="#天然索引之倒排索引" class="headerlink" title="天然索引之倒排索引"></a>天然索引之倒排索引</h3><p>​    es的所有的数据都是默认进行索引的, 这点和mysql正好相反, mysql是默认不加索引的, 要添加索引必须特别说明, es只有不添加索引的时候才需要进行说明.</p><p>​    而且es使用的是倒排索引, 和mysql的B+Tree索引是不同的</p><p><strong>传统关系型数据库</strong></p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030142414194.png"></p><blockquote><p>弊端:</p><ol><li>传统的关系型数据库对于关键词的查询, 只能逐字逐行的进行匹配, 性能非常差</li><li>匹配的方式不合理, 如果用like进行匹配, 根本匹配不到. 但是考虑到使用者的用户体验的话, 除了完全匹配的记录, 还应该显示一部分近似匹配的记录, 至少应该匹配到”手机”</li></ol></blockquote><p><strong>倒排索引是怎么处理的</strong></p><p>全文搜索引擎目前主流的索引技术就是倒排索引的方式</p><p>传统的保存数据的方式都是</p><p>记录 -&gt; 单词</p><p>倒排索引的保存数据的方式是</p><p>单词 -&gt; 记录</p><p>比如搜索”红海行动”</p><p>但是数据库中保存的数据如图</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030143011898.png"></p><p>那么搜索引擎是如何能将两者匹配上的呢?</p><p>基于分词技术构建倒排索引:</p><p>首先每个记录保存数据的时候, 都不会直接存入数据库, 系统会先对数据进行分词, 然后以倒排索引结构进行保存, 如下:</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030143834809.png"></p><p>​    之后当用户进行搜素的时候, 会将搜索的关键词也进行分词, 将”红海行动”分割成为”红海”和”行动”两个单词. </p><p>​    这样的话, 会先使用”红海”进行匹配, 得到id = 1和id = 2的记录编号, 然后再用”行动”匹配可以迅速的定位id为1和3的记录.</p><p>​    全文索引通常还会根据匹配程度进行打分, 显然1号记录能匹配的次数更多. 所以显示的时候以评分进行排序, 1号记录会排到最前面, 而2,3号记录也可以匹配到</p><p><strong>索引结构对比</strong></p><p>B+Tree</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030145330037.png"></p><p>Lucene倒排索引结构</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030145352628.png"></p><p>可以看到lucene为倒排索引部分又增加了一层Term Index结构, 用于快速定位, 而这个Term Index是缓存在内存中的, 但是mysql的B+Tree并不在内存中, 所以整体来看ES的速度更加快, 但是同时也更加消耗资源</p><blockquote><p>Term Index =&gt; Term Dictonary =&gt; posting list</p></blockquote><h3 id="天然索引之Doc-Value列式存储"><a href="#天然索引之Doc-Value列式存储" class="headerlink" title="天然索引之Doc Value列式存储"></a>天然索引之Doc Value列式存储</h3><p>​    倒排索引在搜索包含指定的词条和文档时候非常的高效, 但是在相反的操作时表现很差, 这个相反的操作指的是: 查询一个文档中包含哪些词条.</p><p>​    具体来说, 倒排索引在搜索的时候最为高效, 但是在排序, 聚合等与指定字段相关的操作时效率是低下的, 这个时候就需要用doc_values.</p><p>​    在ElasticSearch中, Doc Values就是一种列式存储结构, 默认的情况下每个字段的DocValues都是激活的. </p><p>​    索引中某个字段的存储结构如下:</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211030150221406.png"></p><p>​    列式存储结构非常适合排序, 聚合以及字段相关的脚本操作, 而且这种存储方式便于压缩, 尤其是数字类型. 压缩之后能够大大的减小磁盘的存储空间, 提升访问速度</p><h2 id="Lucene与elasticsearch的关系"><a href="#Lucene与elasticsearch的关系" class="headerlink" title="Lucene与elasticsearch的关系"></a>Lucene与elasticsearch的关系</h2><p>​    待补充</p><h1 id="elasticsearch的基本概念"><a href="#elasticsearch的基本概念" class="headerlink" title="elasticsearch的基本概念"></a>elasticsearch的基本概念</h1><h2 id="对象名词解释"><a href="#对象名词解释" class="headerlink" title="对象名词解释"></a>对象名词解释</h2><table><thead><tr><th>对象名词</th><th>解释</th></tr></thead><tbody><tr><td>cluster</td><td>整个elasticsearch默认就是集群状态的, 整个集群是一份完整, 互相备份的数据</td></tr><tr><td>node</td><td>集群中的一个阶段, 一般指一个进程就是一个node</td></tr><tr><td>shard</td><td>分片, 即使一个节点中的护具也会通过hash算法, 分成多个分片存放, 7.x默认是1片, 后续的版本默认是5片</td></tr><tr><td>index</td><td>index相当与table</td></tr><tr><td>type</td><td>一种逻辑分区, 7.x版本已经废除, 用固定的_doc占位代替</td></tr><tr><td>document</td><td>类似于rdbms的row, 面向对象里面的object</td></tr><tr><td>field</td><td>相当于字段, 属性</td></tr></tbody></table><h2 id="服务状态查询"><a href="#服务状态查询" class="headerlink" title="服务状态查询"></a>服务状态查询</h2><ul><li><p>GET /_cat/indices?v 查询各个索引的状态</p><blockquote><p>indices  index的复数</p></blockquote><p><strong>表头的含义</strong></p><ul><li>health 索引的健康状态</li><li>index 索引名</li><li>pri 索引主分片数量</li><li>req 索引复制分片数量</li><li>store.size 索引主分片, 复制分片, 总占用存储空间</li><li>pri.store.size 索引总暂用空间, 不计算复制分片的占用空&gt;</li></ul></li><li><p>GET /_cat/health?v 服务整体状态查询</p><ul><li>cluster 集群名称</li><li>status 集群状态, green代表是健康( 健康指的是所有主分片都正常而且每个主分片都至少有一个副本, 集群状态 ), yellow代表分配了所有主分片, 但是至少缺少一个副本, 此时集群的数据仍然是完整的, 主副本都在单点, red代表部分主分片不可用, 可能已经丢失了数据</li><li>node.total 代表在线的节点的总数量</li><li>node.data 代表在线的数据节点的数量</li><li>shard active_shards 存活的分片的数量</li><li>pri  active_primary_shards 存活的主分片的数量</li><li>relo relocating_shards 迁移中的分片数量, 正常情况下数量是为0的</li><li>init initializing_shards 初始化中的分片数量, 正常情况下数量为0</li><li>unassign unassigned_shards 未分配的分片, 正常情况下为0</li><li>pending_tasks 准备中的任务, 任务指的是迁移分片等 , 正常情况下为0</li><li>max_task_wait_time 任务最长等待时间</li><li>active_shards_percent 正常分片百分比, 正常情况为0</li></ul></li><li><p>GET /_cat/nodes?v 查询各个节点的状态</p><ul><li>heap.percent 堆内存占用百分比</li><li>ram.percent 内存占用百分比</li><li>cpu cpu占用百分比</li><li>master 其中*表示集群中的主节点</li><li>name 表示节点名字</li></ul></li><li><p>GET /_cat/shards/xxx 查询某个索引的分片情况</p><ul><li>index 索引名称</li><li>shard 分片序号</li><li>pri req p表示的是该分片的主分片, r表示的是该分片的复制分片</li><li>store 表示该分片占用的存储空间</li><li>node 所属节点和节点名称</li><li>docs 分片存放的文档数量</li></ul></li></ul><h1 id="elasticsearch-restful-api-DSL"><a href="#elasticsearch-restful-api-DSL" class="headerlink" title="elasticsearch restful api(DSL)"></a>elasticsearch restful api(DSL)</h1><p>DSL全称为 Domain Specific Language, 即特定领域专用语言</p><h2 id="es中保存的数据"><a href="#es中保存的数据" class="headerlink" title="es中保存的数据"></a>es中保存的数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Movie</span> </span>&#123;</span><br><span class="line"> String id;</span><br><span class="line">     String name;</span><br><span class="line">     Double doubanScore;</span><br><span class="line">     List&lt;Actor&gt; actorList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span></span>&#123;</span><br><span class="line">String id;</span><br><span class="line">String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这两个对象如果放在关系型数据库保存, 会被拆成两张表, 但是elasticsearch使用一个json表示一个document.</p><p>​    所以它保存到es中应该是:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;operation red sea&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="string">&quot;8.5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhangyi&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;haiqing&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhanghanyu&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对数据的操作"><a href="#对数据的操作" class="headerlink" title="对数据的操作"></a>对数据的操作</h2><ul><li><p>增加一个索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /movie_index</span><br></pre></td></tr></table></figure></li><li><p>删除一个索引</p><p>es是不删除也不会修改任何数据的, 而是增加了版本号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /movie_index</span><br></pre></td></tr></table></figure></li><li><p>新增文档</p><p>格式PUT /movie_index/type/id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT /movie_index/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;operation red sea&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">8.5</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang yi&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hai qing&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang han yu&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">PUT /movie_index/_doc/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;operation meigong river&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">8.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang han yu&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /movie_index/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;incident red sea&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">5.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang chen&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果之前没有创建过index或则和type, es会进行自动创建</p></blockquote></li><li><p>新增文档(非幂等操作)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /movie_index/_doc</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;incident red sea&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">5.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang chen&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 重复执行会新增重复的数据, _id会随机生成</p></blockquote></li><li><p>修改 - 整体替换 (PUT)</p><p>和新增没有区别, 要求是必须包括全部的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /movie_index/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;incident red sea&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">5.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhang chen&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改- 某一个字段 (POST)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST movie_index/_update/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">7.0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除一个document</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE movie_index/_doc/<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>直接用id查找</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>搜索type的全部数据, 也就是搜索doc里面的全部数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br></pre></td></tr></table></figure></li><li><p>按照条件进行查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>match_all  全部匹配</p></blockquote></li><li><p>按照分词进行查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据匹配的成都, 会影像数据的相关度评分, 而相关度评分会影响默认排名.</p></blockquote><p>评分公式:</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211105142315586.png"></p><p>正面因素: 命中次数, 命中长度比例</p><p>负面因素: 关键词在该字段的其他词条中出现的次数</p></li><li><p>按照分词的子属性进行查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;actorList.name&quot;</span>:<span class="string">&quot;zhang&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照短语进行查询 match_phrase</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;match_phrase&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;operation red&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>按照短语进行查询, 不再利用分词技术, 直接用短语在原始数据中进行匹配</p></blockquote></li><li><p>过滤- 符合查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>:[ &#123;<span class="attr">&quot;term&quot;</span>: &#123;  <span class="attr">&quot;actorList.id&quot;</span>: <span class="string">&quot;3&quot;</span>  &#125;&#125; </span><br><span class="line">           ], </span><br><span class="line">           <span class="attr">&quot;must&quot;</span>:&#123;<span class="attr">&quot;match&quot;</span>:&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>must和should的区别: must是必须有, should是在其他条件命中的情况下, shoule命中给分并显示, 如果should未命中则只显示不给分</p></blockquote></li><li><p>过滤 - 按照范围进行过滤</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;doubanScore&quot;</span>: &#123;<span class="attr">&quot;gte&quot;</span>: <span class="number">8</span>&#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于操作符的范围</p><table><thead><tr><th>操作符</th><th>解释</th></tr></thead><tbody><tr><td>gt</td><td>大于</td></tr><tr><td>lt</td><td>小于</td></tr><tr><td>gte</td><td>大于等于 great than or equals</td></tr><tr><td>lte</td><td>小于等于 less than or equals</td></tr></tbody></table></li><li><p>根据查询条件进行删除和修改</p><p><strong>_delete_by_query</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST movie_index/_doc/_delete_by_query </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;actorList.name.keyword&quot;</span>: <span class="string">&quot;zhang chen&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_update_by_query</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST movie_index/_doc/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>:<span class="string">&quot;ctx._source[&#x27;actorList &#x27;][0][ &#x27;name&#x27;]=&#x27;zhang san feng&#x27;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;actorList.name.keyword&quot;</span>: <span class="string">&quot;zhang chen&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序 sort</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;red sea&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;doubanScore&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123; <span class="attr">&quot;match_all&quot;</span>: &#123;&#125; &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>高亮显示</p><p>用于网页中通用的特殊标签来高亮显示结果中的关键字</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;red sea&quot;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:&#123;&#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自定义高亮标签</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;red sea&quot;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>:&#123;<span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;span color=&#x27;red&#x27;&gt;&quot;</span>,<span class="attr">&quot;post_tags&quot;</span>:<span class="string">&quot;&lt;/span&gt;&quot;</span>&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合 aggs</p><p>取出每个演员共参演了多少部电影</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;groupby_actor&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;actorList.name.keyword&quot;</span>  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个演员参演电影的平均分是多少分, 并按照评分进行排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;groupby_actor_id&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;field&quot;</span>: <span class="string">&quot;actorList.name.keyword&quot;</span>,</span><br><span class="line"><span class="attr">&quot;order&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;avg_score&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;avg_score&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;field&quot;</span>: <span class="string">&quot;doubanScore&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聚合的时候为何要加上.keyword后缀呢?</p><p>​    .keyword是某个字符串字段, 专门存储不分词格式的副本, 在某些场景中只允许用不分词的格式, 比如过滤filter, 比如聚合aggs, 所以字段要加上.keyword的后缀</p></li></ul><h2 id="SQL的使用"><a href="#SQL的使用" class="headerlink" title="SQL的使用"></a>SQL的使用</h2><p>elasticsearch sql是6.3版本以后的功能, 可以支持一些最基本的sql查询语句.</p><p>当前情况: </p><ul><li><p>只支持select操作, insert , update, delete一律不支持</p></li><li><p>6.3以前的版本不支持</p></li><li><p>sql比dsl更丰富的函数. 参考: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/sql-functions.html">elastic文档</a></p></li><li><p>不支持窗口函数</p></li><li><p>sql少一些特的功能, 比如高亮, 分页</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET  /_sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:<span class="string">&quot;select actorList.name.keyword, avg(doubanScore) from movie_index  where match(name,&#x27;red&#x27;) group by actorList.name.keyword limit 1 &quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h2><p>elasticsearch本身自带的中文分词, 就是单纯的把中文一个字一个字的分开, 根本没有词汇的盖面, 但是在实际的应用中, 用户都是以词汇为条件, 进行查询和匹配的, 如果能够把文章以词汇为单位分来的话, 那么与用户的查询条件能够更加贴切的匹配上, 查询的速度也更加的快速</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik">分词器下载地址</a></p><p>不同的分词器, 分词有着明显的区别, 所以以后定义一个type不能再使用默认的mapping了, 要手工创建mapping, 因为需要选择分词器</p><h2 id="关于mapping"><a href="#关于mapping" class="headerlink" title="关于mapping"></a>关于mapping</h2><p>之前说type可以理解为table, 那么每个字段的数据类型是如何定义的呢</p><ul><li><p>查看mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index/_mapping/xxx</span><br></pre></td></tr></table></figure><p>实际上每个type中的字段是什么数据类型, 是由mapping定义的. </p><p>但是如果没有设定mapping, 系统会自动的根据一条数据的格式来推断出应该的数据格式</p><ul><li>true/false  boolean</li><li>1020  long</li><li>20.1 float</li><li>“2018-02-21”  date</li><li>“hello world”  text + keyword</li></ul><p>默认的情况下只有text会进行分词, keyworld是不会分词的字符串</p><p>mapping除了自动定义, 还可以手动定义, 但是只能对新家的, 没有数据的字段进行定义. 一旦有了数据就无法再次进行修改</p><blockquote><p>注意: 虽然每个field的数据放在不同的type下, 但是同一个名字的field在一个index下只能有一种mapping定义</p></blockquote></li><li><p>基于中文分词搭建索引</p><ol><li><p>建立mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT movie_chn</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT /movie_chn/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;红海行动&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">8.5</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张译&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;海清&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张涵予&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">PUT /movie_chn/_doc/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;湄公河行动&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">8.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张涵予&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">PUT /movie_chn/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;红海事件&quot;</span>,</span><br><span class="line"><span class="attr">&quot;doubanScore&quot;</span>: <span class="number">5.0</span>,</span><br><span class="line"><span class="attr">&quot;actorList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张晨&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /movie_chn/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;红海战役&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /movie_chn/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;actorList.name&quot;</span>: <span class="string">&quot;张译&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="分割索引"><a href="#分割索引" class="headerlink" title="分割索引"></a>分割索引</h2><p>分割索引就是根据时间间隔将一个业务数据的索引切分成为多个索引</p><p>比如将order_info 变成order_info_20200101, order_info_20200102</p><p><strong>这样做是有两个好处的</strong></p><ol><li>查询范围优化: 因为一般情况下并不会查询全部时间周期数据, 那么通过切分索引, 物理上减少了扫描数据的范围, 也是对性能的优化</li><li>结构变化的灵活性: 因为elasticsearch不允许对数据进行修改, 但是实际使用中索引的结构和配置那么只要对下一个时间间隔的索引进行修改, 原来的索引位置保存原状, 这样就保证了一定的灵活性</li></ol><h2 id="索引别名-aliases"><a href="#索引别名-aliases" class="headerlink" title="索引别名 _aliases"></a>索引别名 _aliases</h2><p>索引别名就像一个快捷方式或者软连接, 可以指向一个或者多个索引, 也可以给任何一个需要索引名称的api来使用, 别名带给我们极大的灵活性, 允许我们做下面的操作</p><ol><li>给多个索引分组(例如, last_three_months)</li><li>给索引的一个子集创建视图</li><li>在运行的集群中可以无缝的从一个索引切换到另一个索引</li></ol><ul><li><p>创建索引别名</p><p>在创建表的时候直接声明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT movie_chn_2020</span><br><span class="line">&#123;  <span class="attr">&quot;aliases&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;movie_chn_2020-query&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;movie&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          , <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;doubanScore&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;actorList&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为已经存在的索引增加别名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;add&quot;</span>:    &#123; <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;movie_chn_xxxx&quot;</span>, <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;movie_chn_2020-query&quot;</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过增加过滤条件缩小查询范围, 建立一个子集的视图</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;add&quot;</span>:    </span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;movie_chn_xxxx&quot;</span>, </span><br><span class="line"><span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;movie_chn0919-query-zhhy&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;term&quot;</span>: &#123;  <span class="attr">&quot;actorList.id&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询别名</p><p>和普通的索引没什么区别</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET movie_chn_2020-query/_search</span><br></pre></td></tr></table></figure></li><li><p>删除某个索引的别名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;remove&quot;</span>:    &#123; <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;movie_chn_xxxx&quot;</span>, <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;movie_chn_2020-query&quot;</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为某个别名进行无缝的切换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;remove&quot;</span>: &#123; <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;movie_chn_xxxx&quot;</span>, <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;movie_chn_2020-query&quot;</span> &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;add&quot;</span>:    &#123; <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;movie_chn_yyyy&quot;</span>, <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;movie_chn_2020-query&quot;</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询别名的列表</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  _cat/aliases?v</span><br></pre></td></tr></table></figure></li></ul><h2 id="索引模板"><a href="#索引模板" class="headerlink" title="索引模板"></a>索引模板</h2><p>index Template 索引模板, 顾名思义, 就是创建索引的磨具, 其中可以定义一系列的规则来帮助我们构建符合特定业务的需求的索引 mappings和settings, 通过使用index Template可以让我们的索引具备可预知的一致性</p><ul><li><p>创建模板</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT _template/template_movie2020</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;index_patterns&quot;</span>: [<span class="string">&quot;movie_test*&quot;</span>],                  </span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;                                               </span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span> : &#123; </span><br><span class="line">    <span class="attr">&quot;&#123;index&#125;-query&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;movie_test-query&quot;</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;                                          </span><br><span class="line"><span class="attr">&quot;_doc&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;movie_name&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中”index_pattern”:[“movie_test*”]的含义就是凡是往movie_test开头的索引写入数据的时候, 如果索引不存在, 那么es会根据此模板自动创建索引</p><p>在”aliases”中用{index}表示, 获得真正的创建的所以名称</p><p><strong>测试</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST movie_test_2020xxxx/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;333&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;zhang3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看系统中已有的模板清单</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  _cat/templates</span><br></pre></td></tr></table></figure></li><li><p>查看某个模板清单</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET  _template/template_movie2020</span><br><span class="line">或者</span><br><span class="line">GET  _template/template_movie*</span><br></pre></td></tr></table></figure></li></ul><h1 id="分布式读写原理"><a href="#分布式读写原理" class="headerlink" title="分布式读写原理"></a>分布式读写原理</h1><h2 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h2><p>新建索引和删除请求都是写操作, 必须在主分片上面完成之后才能被复制到相关的副本切片</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211110085454992.png"></p><p>新建, 索引和删除文档所需要的步骤</p><ol><li>客户端向node1发送新建, 索引或者删除的请求</li><li>节点使用文档的_id确定文档属于分片0, 请求会被转发到node3上, 因为分片0的主分片目前被分配在node3上</li><li>node3在主分片上面执行请求, 如果成功之后, 他将请求并行转发到node1和node2上的副本分片上, 一旦所有的副本分片都报告成功之后, node3将向协调节点报告成功, 协调节点向客户端报告成功</li></ol><blockquote><p>协调节点: 接受客户端请求的节点</p></blockquote><p>如何根据_id计算应该转发到哪个分片?</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard =  hash(routing)  % number_of_primary_shards</span><br></pre></td></tr></table></figure><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过 hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p>那么如果shard的数量变化, 是不是数据就要重新rehash呢, 不会, 因为一个index 的shards数量是不能改变的.</p><h2 id="读流程-有语义疑问"><a href="#读流程-有语义疑问" class="headerlink" title="读流程(有语义疑问)"></a>读流程(有语义疑问)</h2><p>我们可以冲主分片或则和其他副本任意的副本分片检索文档</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211110090517450.png"></p><p>从主分片或者副本分片检索文档的步骤顺序:</p><ol><li>客户端向node1发送获取请求</li><li>节点使用文档的_id来学顶文档数据分片0, 分片0的副本分片存储在所有的三个节点上, 在这种情况下, 它将请求转发到node2上</li><li>node2将文档返回给node1, 然后将文档返回给客户端</li></ol><blockquote><p>在处理读取请求时, 协调节点在每次请求的时候都会通过轮询所有副本分片来达到负载均衡, 在文档被检索的时候, 已经被索引的文档可能已经存在于主分片上, 但是还没有复制到副本分片上. 在这种情况下, 副本分片可能会报告文档不存在, 但是主分片可能会成功返回文档. 一旦索引请求成功返回给客户端, 文档在主分片和副本分片都是可用的</p></blockquote><h2 id="搜索流程"><a href="#搜索流程" class="headerlink" title="搜索流程"></a>搜索流程</h2><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211110091212193.png"></p><ul><li><p>搜索被执行成为一个二阶段, 我们成为 Query Then Fetch</p></li><li><p>在初始查询阶段, 查询会广播导索引中每一个分片拷贝(主分片或者副本分片), 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size的优先队列</p><blockquote><p>ps: 在搜索的时候是会查询FileSystem Cache的, 但是有部分数据还在Memory Buffer, 所以搜索是近实时的</p></blockquote></li><li><p>每个分片返回各自有限队列中所有文档的id和排序值给协调节点, 它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表</p></li><li><p>接下来就是取回阶段, 协调节点判别出那些文档需要被取回并向相关的分片提交多个get请求, 每个分片加载并丰富文档, 如果有需要的话, 接着返回文档给协调节点, 一旦所有的文档都被取回了, 协调节点返回结果给客户端</p></li><li><p>Query Then Fetch的搜索类型在文档相关性打分的时候参考的是本分片的数据, 这样在文档的数量比较少的时候可能不会准确, DFS Query Then Fetch增加了一个预查询的处理, 询问Term和Document frequency, 这个评分会更加的准确, 但是性能可能会变差</p></li></ul><h2 id="文档的修改和并发控制"><a href="#文档的修改和并发控制" class="headerlink" title="文档的修改和并发控制"></a>文档的修改和并发控制</h2><p>elasticsearch中的全部文档数据都是不可变的, 数据不可以被修改, 只能通过版本号的放是不断增加, 这样做的主要目的是解决更新过程中的并发冲突问题</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211110092515040.png"></p><ul><li><p>悲观并发控制</p><p>这种方法被关系型数据库广泛使用, 它假定有变更冲突可能发生, 因此阻塞访问资源以防止冲突, 一个典型的例子就是读取一行数据之前先将其锁住, 确保只有防止锁的线程能够对这行数据进行修改.</p></li><li><p>乐观并发控制</p><p>elasticsearch中使用的这种方法假定冲突是不可能发生的, 并且不会阻塞正在尝试的操作, 然而, 如果元数据在读写当中被修改, 更新将会失败, 程序在接下来将决定应该如何解决冲突. 例如可以重新给嗯行, 使用新的数据, 或者将相关的情况报告给客户</p></li></ul><h2 id="删除方式"><a href="#删除方式" class="headerlink" title="删除方式"></a>删除方式</h2><p>如果该文档被删除, 也不会直接物理删除, 而是通过给文档打上删除的标记, 进行逻辑删除, 直到该索引触发合并的时候, 才会进行物理删除, 释放存储空间</p><h2 id="关于shard与段的划分"><a href="#关于shard与段的划分" class="headerlink" title="关于shard与段的划分"></a>关于shard与段的划分</h2><p>由于索引是以天为单位进行建立的, 如果业务线很多, 每个索引又不注意控制分片, 如积月累下来一个集群几万到几十万个分片也是不难见到的.</p><h2 id="shard太多带来的危害"><a href="#shard太多带来的危害" class="headerlink" title="shard太多带来的危害"></a>shard太多带来的危害</h2><p> 每个分片都有lucene索引, 这些索引都会消耗cpu和内存, 同样的数据, 分片越多, 额外消耗的cpu和内存就会越多, 会出现1+1&gt;2的情况</p><p>shard的目的是为了负载均衡让每个觉点的硬件充分发挥, 但是如果分片多的情况下, 在单个几点上的多个shard同时接受请求, 并对本节点的资源形成了竞争, 实际上反而造成了内存的消耗.</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink-CEP</title>
      <link href="/2010/12/12/Flink-CEP/"/>
      <url>/2010/12/12/Flink-CEP/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Flink-CEP"><a href="#什么是Flink-CEP" class="headerlink" title="什么是Flink CEP"></a>什么是Flink CEP</h1><p>Flink CEP是一个基于FLink 的复杂时间处理库, 可以从多个数据流中发现复杂的事件, 识别有意义的事件(例如机会或者威胁), 并尽快做出响应, 而不是需要等待几天或者相当长的事件才发现问题.</p><h1 id="Flink-CEP-API"><a href="#Flink-CEP-API" class="headerlink" title="Flink CEP API"></a>Flink CEP API</h1><p>CEP API的核心是Pattern的API, 它允许你快速定义复杂的事件模式. 每个模式包含多个阶段(stage), 或者我们可以称之为状态, 从一个状态切换到另一个状态, 用户可以指定条件, 这些条件可以作用在临近的事件或者独立的事件上.</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> CEP </tag>
            
            <tag> pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink-DataStream流处理算子</title>
      <link href="/2010/12/12/Flink-DataStream%E6%B5%81%E5%A4%84%E7%90%86%E7%AE%97%E5%AD%90/"/>
      <url>/2010/12/12/Flink-DataStream%E6%B5%81%E5%A4%84%E7%90%86%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>参考引用链接: </p><ul><li><a href="https://github.com/legendtkl/paper_reading/blob/main/realtime-compute/Chandy-Lamport.md">分布式快照算法: Chandy-Lamport</a></li><li>五分钟学大数据微信公众号</li><li>尚硅谷大数据学习文档</li><li>Flink1.13官方文档</li></ul><p>程序执行流程图</p><pre class="mermaid">graph LR    environment --> source --> transform --> sink</pre><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><h2 id="getExecutionEnvironment"><a href="#getExecutionEnvironment" class="headerlink" title="getExecutionEnvironment"></a>getExecutionEnvironment</h2><p>​    创建一个执行环境, 表示当前执行程序的萨湖给你下文, 如果程序是独立调用的, 则此方法返回本地执行环境; 如果从命令行客户端提交到集群, 则此方法返回的是集群的客户端环境</p><p>​    getExecutionEnvironment会根据查询运行的方式返回什么样的运行环境, 是最常用的一种创建执行环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutionEnvironment env = ExecutionEnvironment.getExecutionment();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br></pre></td></tr></table></figure><p>​    当没有设置并行度的时候, 以<code>fink-conf.yaml</code>中的配置为准, 默认的并行度是1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="createLocalEnvironment"><a href="#createLocalEnvironment" class="headerlink" title="createLocalEnvironment"></a>createLocalEnvironment</h2><p>​    返回本地执行环境, 需要在调用的时候指定默认的并行度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalStreamEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="createRemoteEnvironment"><a href="#createRemoteEnvironment" class="headerlink" title="createRemoteEnvironment"></a>createRemoteEnvironment</h2><p>​    返回集群执行环境, 将Jar提交到远程服务器中, 需要在调用的时候指定JobManager的IP和端口号, 并执行要在集群中运行的jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvionment env = StreamEnvironmentExecution.createRemoteEnvironment(<span class="string">&quot;jobManagerHostName&quot;</span>,<span class="number">6123</span>,<span class="string">&quot;YOURPATH//WordCount.jar&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>​    Flink可以使用<code>StreamExecutionEnvironment.addSource(source)</code>来为我们的程序添加数据来源</p><p>​    Flink提供了很多实现好的SourceFunction, 当然我们也可以<strong>通过SourceFunction来定义非并行的Source或者实现.</strong></p><p>​    ParallelSourceFunction接口或者扩展RichParallelSourceFunction来定义并行的Source</p><p>​    FLink在流处理上大概分为四类</p><ul><li>基于本地文件的source</li><li>基于文件的source</li><li>基于网络套接字的source</li><li>自定义的source</li></ul><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><p>用户通过算子能够将一个或者多个DataStream抓换成为新的DataStream, 在应用程序中可以将多个数据转换算子并合并成为一个复杂的数据流拓扑</p><h2 id="数据流转换"><a href="#数据流转换" class="headerlink" title="数据流转换"></a>数据流转换</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong>DataStream</strong> ➡​ <strong>DataStream</strong></p><pre class="mermaid">graph LR    A[DataStream] --> DataStream</pre><p>Takes one element and products one element, A map function that doubles the values of the stream:</p><blockquote><p>取一个元素并产生一个元素, 下面是map函数将输入流的值进行加倍输出的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="comment">// 泛型分别对应着输入类型和输出类型</span></span><br><span class="line">                .map(<span class="keyword">new</span> MapFunction&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flatmap"><a href="#Flatmap" class="headerlink" title="Flatmap"></a>Flatmap</h3><p><strong>DataStream</strong> ​➡​ <strong>DataStream</strong></p><pre class="mermaid">graph LR    A[DataStream] --> DataStream</pre><p>Takes one element and products zero, one , or more elements. A flatmap function that splits sentences to words:</p><blockquote><p>取一个元素并产生0个, 1个或者多个元素,  下面是一个flatmap算子将句子拆分为单词的栗子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.fromElements(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;java python scala&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello java hello&quot;</span>)</span><br><span class="line">                .flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        String[] strings = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">                            out.collect(string);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><strong>DataStream</strong> ​➡​ <strong>DataStream</strong></p><pre class="mermaid">graph LR    A[DataStream] --> DataStream</pre><p>Evaluates a boolean function for each element and retains those for which the function returns true . A filter that filters out zero values:</p><blockquote><p>为每个元素计算一个布尔函数, 保留返回值为true的元素, 下面的filter将值为0的数据进行过滤</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">0</span>)</span><br><span class="line">                .filter(<span class="keyword">new</span> FilterFunction&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h3><p><strong>DataStream</strong> ​➡​ <strong>KeyedStream</strong></p><pre class="mermaid">graph LR    A[DataStream] -->|k1| B[KeyedStream]    A -->|k2| C[KeyedStream]    A -->|k3| D[KeyedStream]    A -->|kn| E[.....]</pre><p>logically partitions a stream into disjoint partitions. All records with the same key are assigned to the same partition. Internally , keyBy() is implemented with hash partitioning. There are different ways to specify keys.</p><blockquote><p>在逻辑上将一个流划分为不相交的分区, 所有具有相同的键的记录都会被分配到同一个分区. 在内部, keyBy()是通过hash值实现的, 指定键的方法有很多种</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">2</span>);</span><br><span class="line">        env.fromElements(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;java python scala&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello java hello&quot;</span>)</span><br><span class="line">                .keyBy(<span class="keyword">new</span> KeySelector&lt;String, Character&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Character <span class="title">getKey</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value.charAt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A type cannot be a key if:</p><ol><li>it is a pojo type but does not override the hashCode() method and relies on the Object.hashCode() implementation.</li><li>it is an array of any type.</li></ol><blockquote><p>在以下的情况下, 类型不能是键: </p><ol><li>它是一种POJO类型, 但是没有覆盖hashCode[]方法并且依赖于Object.hashCode()实现. </li><li>它是任何类型的数组.</li></ol></blockquote><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p><strong>KeyedStream</strong> ➡ <strong>DataStream</strong></p><pre class="mermaid">graph LR    KeyedStream --> DataStream</pre><p>A “rolling” reduce on a  keyed data stream. Combines the current element with the last reduced value and emits the new value.</p><p>A reduce fuction that creates a stream of partial sums.</p><blockquote><p>键控数据流上的数据进行”滚动”减少. 将当前元素与最后减少的值组合并发出新的值</p><p>下面的reduce函数创建部分的流, 单词统计示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.fromElements(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;java python scala&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello java hello&quot;</span>)</span><br><span class="line">                <span class="comment">// 当使用lambda表达式的时候要注意发生泛型擦除的问题, 所以我们对时候lambda的函数后面</span></span><br><span class="line">                <span class="comment">// 追加returns方法指定输出的结果类型</span></span><br><span class="line">                .flatMap(</span><br><span class="line">                        (String in, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out) -&gt; &#123;</span><br><span class="line">                            String[] strings = in.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                            <span class="keyword">for</span> (String string : strings) out.collect(Tuple2.of(string, <span class="number">1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                ).returns(Types.TUPLE(Types.STRING, Types.INT))</span><br><span class="line">                <span class="comment">// 以二元组的第一个元素为key</span></span><br><span class="line">                .keyBy(r -&gt; r.f0)</span><br><span class="line">                <span class="comment">// 使用reduce对相同key的每条数据保留一份状态值</span></span><br><span class="line">                .reduce(<span class="keyword">new</span> ReduceFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">reduce</span><span class="params">(Tuple2&lt;String, Integer&gt; value1, Tuple2&lt;String, Integer&gt; value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> Tuple2.of(</span><br><span class="line">                                value1.f0,</span><br><span class="line">                                value1.f1 + value2.f1</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:chestnut:<strong>数字流保存最大值和最小值示例</strong></p><p>自定义source</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            ctx.collect(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flink Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.addSource(<span class="keyword">new</span> IntegerSource())</span><br><span class="line">                <span class="comment">// 创建tuple, 用于存储最大值和最小值</span></span><br><span class="line">                .map(ele -&gt; Tuple2.of(ele, ele))</span><br><span class="line">                <span class="comment">// 因为存在泛型擦除问题, 所以这里要声明向下游传递的数据类型</span></span><br><span class="line">                .returns(Types.TUPLE(Types.INT, Types.INT))</span><br><span class="line">                <span class="comment">// 放到一个逻辑分区之内进行判断</span></span><br><span class="line">                .keyBy(ele -&gt; <span class="number">1</span>)</span><br><span class="line">                .reduce(<span class="keyword">new</span> ReduceFunction&lt;Tuple2&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;Integer, Integer&gt; <span class="title">reduce</span><span class="params">(Tuple2&lt;Integer, Integer&gt; value1, Tuple2&lt;Integer, Integer&gt; value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//value1 代表当前元素, value2 代表上游输出的元素, 是状态保存的一种体现</span></span><br><span class="line">                        <span class="keyword">return</span> Tuple2.of(</span><br><span class="line">                                <span class="comment">//保存最大值</span></span><br><span class="line">                                value1.f0 &gt; value2.f0 ? value1.f0 : value2.f0,</span><br><span class="line">                                <span class="comment">// 保存最小值</span></span><br><span class="line">                                value1.f1 &lt; value2.f1 ? value1.f1 : value2.f1</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h1><h1 id="RichFunction"><a href="#RichFunction" class="headerlink" title="RichFunction"></a>RichFunction</h1><p>每一个并行子任务都有自己的声明周期</p><ul><li>open(): 在算子的计算逻辑前执行一次, 适合做初始化的工作, 比如打开链接</li><li>close(): 在算子的计算逻辑执行完毕之后执行一次, 比如关闭链接</li><li>getRuntimeContext(): 用来获取当前算子的上下文信息, 比如当前算子所处的并i性子任务的索引等等</li></ul><p>MapFunction ➡ RichMapFunction</p><p>FilterFunction ➡ RichFilterFunction</p><p>FlatMapFunction ➡ RichFlatMapFunction</p><p>SourceFunction ➡ RichSourceFunction</p><p>SinkFunction ➡ RichSInkFunction</p><h2 id="RichMapFunction"><a href="#RichMapFunction" class="headerlink" title="RichMapFunction"></a>RichMapFunction</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .map(<span class="keyword">new</span> RichMapFunction&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">super</span>.open(parameters);</span><br><span class="line">                        System.out.println(<span class="string">&quot;梦开始的地方&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">super</span>.close();</span><br><span class="line">                        System.out.println(<span class="string">&quot;梦结束了&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value * value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🍕<strong>result</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">梦开始的地方</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">梦结束了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink-Watermark</title>
      <link href="/2010/12/12/Flink-Watermark/"/>
      <url>/2010/12/12/Flink-Watermark/</url>
      
        <content type="html"><![CDATA[<p><strong>参考引用链接:</strong> </p><ul><li>基于Apache Flink的流式计算 (崔星灿译)</li></ul><h1 id="事件时间与水位线概述"><a href="#事件时间与水位线概述" class="headerlink" title="事件时间与水位线概述"></a>事件时间与水位线概述</h1><h2 id="事件时间"><a href="#事件时间" class="headerlink" title="事件时间"></a>事件时间</h2><p>&emsp;事件时间是数据流中事件实际发生的事件, 它以附加在数据流中事件的时间戳为依据. 这些时间戳通常在事件数据进入流处理管道之前就存在, 比如事件的生成时间.  如图所示, 即使事件有延迟, 事件时间窗口也能准确地将事件分配到窗口中, 从而反应出真是发生的情况</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211211194513675.png"></p><p>&emsp;事件时间将处理速度和结果内容彻底解耦. 基于事件时间的操作是可以预测的, 其结果具有确定性. 无论数据流的处理速度如何, 事件到达算子的顺序怎样, 基于事件时间的窗口会生成同样的结果.</p><p>​    &emsp;使用事件时间要克服的挑战之一是如何处理延迟事件, 普遍存在的无序问题也可以得到解决. 假设有一名名叫鲍勃的玩家和爱丽丝玩的同一款在线手游, 但是因为网络供应商不同, 爱丽丝的手机在隧道中没有信号了, 但是鲍勃的手机依旧联网向游戏后端发送数据</p><p>&emsp;<strong>依据事件时间, 我们可以保证在数据乱顺序的情况下结果依然正确, 而且结合可重放的数据流, 时间戳带来的确定性允许你对历史数据进行”快进”. 这意味着你可以通过重放数据流来分析历史数据, 就如同它们是实时产生的一样.</strong> 此外, 你可以把计算”快进”到现在, 这样一旦你的程序赶上了当前事件产生的进度, 它能够以完全相同的程序逻辑作为实时应用继续运行.</p><h2 id="水位线"><a href="#水位线" class="headerlink" title="水位线"></a>水位线</h2><p>&emsp;我们要怎么决定<strong>事件时间的触发时机</strong>呢? 或者说, 我们需要等待多久才能确定已经收到了所有发生在某个特定时间点之前的事件? 换而言之, 我们需要多久才能确定已经收到了所有发生在某个特定时间点之前的事件? 此外, 我们如何<strong>得知数据会产生延迟</strong>? 因为分布式系统实现的不确定性以及外部组件可能引发任意延迟, 这两个答案都是没有完美的答案的. 我们可以使用水位线来设定事件时间窗口的行为</p><p>&emsp;水位线是一个<strong>全局进度指标,</strong> 表示<strong>我们不确信不会再有延迟事件来到的某个时间点.</strong>  本质上, 水位线提供了一个逻辑时钟, 用来通知系统当前的事件时间. 当一个算子接收到时间为T的水位线, 就可以认为不会再收到任何时间戳小于或等于T的事件了.  水位线无论对于事件时间窗口还是处理乱序事件的算子都很关键. 算子一旦收到某个水位线, 就相当于收到了信号: 某个特定时间区间的时间戳已经到齐了, 可以触发窗口计算或者对接受的数据进行排序了. </p><p>&emsp;<strong>水位线允许我们在结果的准确性和延迟之间做出取舍.</strong>  激进的水位线策略保证了低延迟, 但随之而来的是低可信度. 该情况下, 延迟事件可能会在水位线之后到来, 我们必须额外加一些代码来处理它们. 反之, 如果水位线过于保守, 虽然可信度得到了保证, 但可能会无所谓地增加处理延时.</p><p>&emsp;无论水位线是由用户定义还是自动生成的, 只要存在”拖后腿”的任务, 追踪分布式系统中的全局进度就可能出现问题, 因此简单地依赖水位线并不是总可以高枕无忧. 而流处理系统很关键的一点是能够提供某些机制来处理那些可能晚于水位线的吃到时间. 根据应用需求的不同, 你可能会直接忽略这些事件, 将他们写入日志或者利用它们去修正之前的结果. </p><h1 id="简单架构描述"><a href="#简单架构描述" class="headerlink" title="简单架构描述"></a>简单架构描述</h1><h2 id="事件时间处理"><a href="#事件时间处理" class="headerlink" title="事件时间处理"></a>事件时间处理</h2><p>&emsp;虽然处理时间世居于处理机器的本地事件, 相对容易理解, 但是它会产生一些较为随意, 不一致且无法重现的结果. 相反, 事件时间语义会生成可重现且一致性的结果, 这也是很多流处理用例的刚需, 但和基于处理时间语义的应用相比, 基于事件时间的应用需要一些额外的配置, 此外, 相比纯粹使用处理时间的引擎, 支持事件时间的流处理引擎内部要更加的复杂.</p><p>&emsp;Flink不仅针对常见的事件时间提供了直观易用的原语, 还支持一些表达能力很强的API, 允许使用者以自定义算子的方式时间更高级的事件时间处理应用. 在面对这些高级应用的时候, 充分理解Flink内部事件处理机制通常会有所帮助. 有时候更是必要的, Flink在处理时间语义时所采用的两个概念分别时: 记录时间戳和水位线. 接下老会介绍Flink内部如何实现和处理时间戳以及水位线以支持事件时间语义的流式应用</p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>&emsp;在事件时间模式下, Flink流式应用处理的所有记录都必须包含时间戳, 时间戳将记录和特定的时间点进行关联, 这些时间点通常时记录所对应事件发生的时间. 但实际上应用可以自由选择时间戳的含义, 只要保证流记录的时间戳会随着数据流的前进大致递增即可, 正如”时间语义”中所述, 基本上所有现实应用场景都会出现一定程度的时间戳乱序. </p><p>&emsp;当Flink以事件时间模式处理数据的时候, 会根据记录的时间戳触发事件相关算子的计算, 例如, 时间窗口算子会根据记录关联的时间戳将其分配到窗口中. **Flink内部采用8字节的Long值对时间戳进行编码, 并将它们以元数据(metadata)的形式附加在记录上. ** 内置算子会将这个Long值解析为毫秒精度的Unix. 但是自定义算子可以有自己的时间戳解析机制, 如将精度调整为微秒.</p><h2 id="水位线-1"><a href="#水位线-1" class="headerlink" title="水位线"></a>水位线</h2><p>&emsp;除了记录的时间戳, Flink基于事件时间的应用还必须提供水位线(watermark). 水位线用于在事件时间应用中推断每个任务当前的事件时间. 基于时间的算子会使用这个时间来触发计算并推动进度前进, 例如: 基于时间窗口的任务会使其事件时间超过窗口结束边界时进行最终的窗口计算并发出结果.</p><p>&emsp;在Flink中, 水位线是利用一些包含Long值时间戳的特殊记录来实现的. 如图所示, 它们像带有额外时间戳的常规记录一样在数据中流动</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211211204651727.png"></p><h3 id="水位线具有两个基本属性"><a href="#水位线具有两个基本属性" class="headerlink" title="水位线具有两个基本属性"></a>水位线具有两个基本属性</h3><ol><li>必须是单调递增的,这是为了确保任务中的事件时间时钟正确前进, 不会倒退</li><li>和记录的时间戳存在联系, 一个时间戳为T的水位线表示, 接下来所有记录的时间戳一定都大于T</li></ol><p>&emsp;<strong>第二个属性可用来处理数据流中时间戳乱序的记录, 例如上图中时间戳为3和5的记录可能会包含乱序的时间戳, 这些算子只有当自己的事件之中(由接受的水位线驱动)指示不必再等那些包含相关时间戳的记录的时候,  才会最终触发计算.</strong> 当任务收到一个违反水平线属性, 即时间戳小于或者前一个水位线的记录的时候, 该记录本应该参与的计算可能已经完成, 我们称此类记录为迟到数据(late record).  为了处理迟到的数据, Flink提供了不同的机制, 后面会接受对于迟到数据的处理</p><p>&emsp;水平线的意义之一在于它允许应用控制结果的完整性和延迟. 如果水位线和记录的时间戳非常接近, 那结果的处理延迟就会很低, 因为任务无需等待过多记录就可以触发最终的计算.  但是同时结果的完整性可能会受到影响, 因为可能有部分相关记录被视为是迟到的数据, 没能参与运算. 相反, 非常”保守”的水位线会增加处理的延迟,  但同时结果的完整性也会有所提升.</p><h2 id="水位线传播和事件时间"><a href="#水位线传播和事件时间" class="headerlink" title="水位线传播和事件时间"></a>水位线传播和事件时间</h2><p>Flink内部将水位线实现为特殊的记录,  它们可以通过算子任务进行接受和发送, 任务内部的时间服务 (time service)会维护一些计时器(timer),  它们依靠接收到水位线来激活. 这些计时器是由任务再时间服务内注册, 并在将来的某个时间点执行计算. 例如, 窗口算子会为每个活动窗口注册一个计时器, 它们会在事件时间超过窗口的结束时间时清理窗口状态.</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> Watermark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink-Windows函数</title>
      <link href="/2010/12/12/Flink-Windows%E5%87%BD%E6%95%B0/"/>
      <url>/2010/12/12/Flink-Windows%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>参考引用链接: </p><ul><li><a href="https://github.com/legendtkl/paper_reading/blob/main/realtime-compute/Chandy-Lamport.md">分布式快照算法: Chandy-Lamport</a></li><li>五分钟学大数据微信公众号</li><li>尚硅谷大数据学习文档</li><li>Flink1.13官方文档</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>windows are at the heart of processing infinite streams. Windows split the stream into “buckets” of finite size, over which we can apply computations. This document focuses on how windowing is performed in Flink and how the programmer can benefit to the maximum from its offered functitonality.</p><p>The general structure if w windowed Flink program is presented below, The first snippet refers to keyed streams, while the second to non-keyed ones. As one can see, the only difference is the keyBy(…) call for the keyed streams and the window(…) which becomes windowAll(…) for non-keyed streams, This is also going to serve as a roadmap for the rest of the page.</p><blockquote><p>windows是处理无界流的核心. windows将流分成有限大小的”桶”, 我们可以在这些桶上映用计算. 我们重点介绍如何在Flink中执行窗口化以及程序员如何从其提供的功能中获得最大的收益</p><p>窗口化的Flink的程序一般结构如下所示. 第一个片段是指监控流, 第二个指控的是非键控流, 如您所见, 唯一的区别是keyBy(…)对键控流的调用是window, 对于非键控流调用的是windowAll. 这也将作为页面其余部分的路线图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream</span><br><span class="line">       .keyBy(...)               &lt;-  keyed versus non-keyed windows</span><br><span class="line">       .window(...)              &lt;-  required: <span class="string">&quot;assigner&quot;</span></span><br><span class="line">      [.trigger(...)]            &lt;-  optional: <span class="string">&quot;trigger&quot;</span> (<span class="keyword">else</span> <span class="keyword">default</span> trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  optional: <span class="string">&quot;evictor&quot;</span> (<span class="keyword">else</span> no evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  optional: <span class="string">&quot;lateness&quot;</span> (<span class="keyword">else</span> zero)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  optional: <span class="string">&quot;output tag&quot;</span> (<span class="keyword">else</span> no side output <span class="keyword">for</span> late data)</span><br><span class="line">       .reduce/aggregate/apply()      &lt;-  required: <span class="string">&quot;function&quot;</span></span><br><span class="line">      [.getSideOutput(...)]      &lt;-  optional: <span class="string">&quot;output tag&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stream</span><br><span class="line">       .windowAll(...)           &lt;-  required: <span class="string">&quot;assigner&quot;</span></span><br><span class="line">      [.trigger(...)]            &lt;-  optional: <span class="string">&quot;trigger&quot;</span> (<span class="keyword">else</span> <span class="keyword">default</span> trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  optional: <span class="string">&quot;evictor&quot;</span> (<span class="keyword">else</span> no evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  optional: <span class="string">&quot;lateness&quot;</span> (<span class="keyword">else</span> zero)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  optional: <span class="string">&quot;output tag&quot;</span> (<span class="keyword">else</span> no side output <span class="keyword">for</span> late data)</span><br><span class="line">       .reduce/aggregate/apply()      &lt;-  required: <span class="string">&quot;function&quot;</span></span><br><span class="line">      [.getSideOutput(...)]      &lt;-  optional: <span class="string">&quot;output tag&quot;</span></span><br></pre></td></tr></table></figure><p>In the above, the commands in square brackets ([…]) are optional. This reveals that Flink allows you to customize your windowing logic in many different ways so that it best fits your needs.</p><blockquote><p>在上面, 方括号([…])中的命令是可选的, 这表明Flink允许您以多种不同的方式自定义窗口逻辑, 使其最适合您的需求.</p></blockquote><pre class="mermaid">graph LR    subgraph bound1        a[Event] --> b[Event] --> c[Event]    end    subgraph bound2        c --> d[Event] --> e[Event] --> f[Event]    end    f --> g[Event] --> h[Event] --> ...</pre><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>in a nutshell , a window is created as soon as the first element that should belong to this window arrives, and the window is conpletely removed when the time (even or processing time) passes its end timestamp plus the user-specified allowed lastness(see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#allowed-lateness">Allowed Lateness</a>). Flink guarantees removal only for time-based windows and not for other types, eg. global windows (see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#window-assigners">Window Assigners</a>). For Exemple , with an event-time-based windowing strategy that creates non-overlapping(or tumbling) windwos every 5 minutes and has an allowed lateness of 1 min, Flink will create a new window for the interval between 12:00 and 12:05 when the first element with a timestamp that falls into this interval arrives, and it will remove it when the watermark passes the 12:06 timestamp.</p><blockquote><p>简而言之, 当地一个应该属于这个创建口的元素到达的时候, 就会创建一个窗口, 而当时间(事件事件或者处理时间)超过其结束时间戳加上用户指定的允许延迟时, 该窗口就会被完全删除. Flink只保证基于时间的窗口的溢出, 而不保证其他的类型, 例如全局窗口. 例如, 对于一个基于事件事件的窗口策略, 每五分钟吃u昂建一个不重叠(或者翻滚)的窗口, 并且允许分钟的延迟, 当地一个育有时间戳的元素到达这个区间的时候, Flink将为12:00和12:05之间的区间创建一个新的窗口, 并且当水印通过12:06的时间戳的时候, 将会删除</p></blockquote><p>in addition, each window will have a Trigger (see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#triggers">Trigger</a>) and a function(ProcessWindowFunction, ReduceFunction, Or AggregateFunction)(see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#window-functions">Window Functions</a>) attached to it, The function will contain the computation to be applied to the contents of the window , while the Trigger specifies the condition of the windwo , window is considered ready for the function to be applied. A triggering policy might be something like “when the number of elements in the window is more than 4”, or “when the watermark passes the end of the window”. A trigger can also decide to purge a window’s contents any time between its creation and removal , Purging in this case only refers to the elements in the window, and not the window metadata. This means that new data can still be added to that window.</p><blockquote><p>此外, 每一个窗口都会有一个触发器和一个函数(ProcessWindowFunction,ReduceFunction或则AggregateFunction)附加到它. 该函数将包含应用于窗口内容的计算, 而触发器则指定窗口被认为朱安备好应用该函数的条件. 触发策略可能是”当窗口中的元素数量超过4”或者”当水印通过窗口的末端的时候”. 触发器也可以决定窗口创建和删除之间的任何时间清除其中的内容. 在这种情况下, 清除只指窗口中的元素, 而不是窗口的元数据. 这意味着, 新的数据仍然可以被添加到该窗口.</p></blockquote><p>Apart from the above , you can specify an Evictor(see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#evictors">Evictor</a>) which will be able to remove elements from the window after the trigger fires and before and/or after the function is applied.</p><p>In the following we go into more deetail for each of the components above. We start with the required parts in the above snippet(see <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#keyed-vs-non-keyed-windows">Keyed vs Non-Keyed Windows</a>, <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#window-assigner">Windwo Assigner</a>, and <a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#window-function">Window Function</a>)before moving to the optional ones.</p><blockquote><p>除了上面的这些, 你还可以指定一个Evictor, 他将能够在触发器出发之后, 在函数应用之前和/或者之后从窗口中移除元素.</p><p>在下文中, 我们将会对上述的组件进行更加详细的讨论, 我们从上述片段中的必要部分开始, 然后再转到可选部分</p></blockquote><h1 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h1><ul><li><p>时间窗口</p><p>:one:滚动时间窗口</p><p>:two:滑动时间窗口</p><p>:three:会话窗口</p></li><li><p>计数窗口</p><p>:one:滚动计数窗口</p><p>:two:滑动技术窗口</p></li></ul><h1 id="滚动窗口"><a href="#滚动窗口" class="headerlink" title="滚动窗口"></a>滚动窗口</h1><p>A tumbing windows assigner assigns each element to a window of sprcified window size. Tubming windows have a fixed size and do not overlap. For example, if you specify a tumbling window with a size of 5 minutes, the current window will be evaluated and a new window will be  started every five minutes as illisrated by the following figure.</p><blockquote><p>滚动窗口分配器将每个元素分配到一个指定窗口大小的窗口. 滚动窗口有一个固定的尺寸, 并且不重叠. 例如, 如果你指定一个大小为5分钟的滚动窗口, 当前的窗口将会被评估, 并且每5分钟开始一个新的窗口. 如下图所示.</p></blockquote><p><strong>:red_circle:Flink窗口是左闭右开的, 例如0-5s最后一个时间戳是4999​</strong></p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/tumbling-windows.svg"></p><pre class="mermaid">graph LR    A[数据流]    subgraph "key1-window-[0~5]"        F[key2-event] --> G[key2-event]    end    subgraph "key1-window-[0~5]"        D[key1-event] --> E[key1-event]    end    A --> F    A --> D</pre><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink-介绍与架构</title>
      <link href="/2010/12/12/Flink-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%9E%B6%E6%9E%84/"/>
      <url>/2010/12/12/Flink-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>参考引用链接: </p><ul><li><a href="https://github.com/legendtkl/paper_reading/blob/main/realtime-compute/Chandy-Lamport.md">分布式快照算法: Chandy-Lamport</a></li><li>五分钟学大数据微信公众号</li><li>尚硅谷大数据学习文档</li><li>Flink1.13官方文档</li></ul><h1 id="Flink流式处理的简介"><a href="#Flink流式处理的简介" class="headerlink" title="Flink流式处理的简介"></a>Flink流式处理的简介</h1><h2 id="Flink是什么"><a href="#Flink是什么" class="headerlink" title="Flink是什么"></a>Flink是什么</h2><p>Apache Flink是一个框架和分布式处理引擎, 对于有界流和无界流进行状态计算.</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>支持高吞吐, 低延时, 高性能的处理</li><li>支持带有事件时间的窗口操作</li><li>支持有状态计算的Exactly-once语义</li><li>支持高度灵活的窗口操作, 支持基于time, count, session 以及 data-driven的操作</li><li>支持具有Backpressure功能的持续流模型</li><li>支持基于轻量级分布式快照 snapshot实现的容错</li><li>一个运行时同时支持batch on streaming处理和streaming处理</li><li>Flink支持在jvm内部实现了自己的内存管理</li><li>支持迭代计算</li><li>支持程序自动化: 避免特定情况下shuffle, 排序等昂贵操作, 中间结果有必要进行缓存</li></ol><h2 id="Flink基石"><a href="#Flink基石" class="headerlink" title="Flink基石"></a>Flink基石</h2><p>Flink之所以这么流畅, 离不开它最重要的四个基石 : CheckPoint, State, Time, Window</p><h3 id="CheckPoint"><a href="#CheckPoint" class="headerlink" title="CheckPoint"></a>CheckPoint</h3><p>CheckPoint机制, 这是Flink最重要的一个特性, Flink基于Chandy-Lamport算法实现了一个分布式的一致性快照, 从而提供了一致性的语义. <a href="https://github.com/legendtkl/paper_reading/blob/main/realtime-compute/Chandy-Lamport.md">Chandy-Lamport</a>算法是在1985年的时候被提出来了, 但是并没有被很广泛的应用, 而Flink则是将这个算法发扬光大了</p><blockquote><p>Chandy-Lamport</p><p> Spark 的 Structured Streaming 的 Continuous Processing Mode 的容错处理使用了分布式快照（Distributed Snapshot）算法 Chandy-Lamport 算法</p></blockquote><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>提供了一致性的语义之后, 为了更加轻松的管理状态, 提供了一套简单明了的状态API, 里面提供了ValueState, ListState, MapState, BroadCastState等, 使得State API能够自动的享受一致性的语义</p><h3 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h3><p>能够支持基于时间的时间的处理, 或者说基于系统时间的处理, 能够容忍数据的延时, 容忍数据的迟到, 容忍乱序的数据</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>Flink提供了开箱即用的各种窗口, 比如滑动窗口, 滚动窗口, 会话窗口以及非常灵活的自定义的窗口</p><h2 id="批处理和流处理"><a href="#批处理和流处理" class="headerlink" title="批处理和流处理"></a>批处理和流处理</h2><p>Flink分别提供了面向流式处理的接口(Data Stream API)和面向批处理的(DataSet API), 因此Flink既可以完成流式处理, 也可以完成批处理</p><h1 id="Flink运行架构"><a href="#Flink运行架构" class="headerlink" title="Flink运行架构"></a>Flink运行架构</h1><h2 id="架构对比"><a href="#架构对比" class="headerlink" title="架构对比"></a>架构对比</h2><h3 id="HDFS主从架构"><a href="#HDFS主从架构" class="headerlink" title="HDFS主从架构"></a>HDFS主从架构</h3><pre class="mermaid">graph LR    A[NameNode] --> B[DataNode]    A --> C[DataNode]    A --> D[DataNode]</pre><h3 id="Spark架构"><a href="#Spark架构" class="headerlink" title="Spark架构"></a>Spark架构</h3><pre class="mermaid">graph LR     A[Driver] --> B[Executer]    A --> C[Executer]    A --> D[Executer]</pre><h3 id="Flink架构"><a href="#Flink架构" class="headerlink" title="Flink架构"></a>Flink架构</h3><p>Flink运行时由两种类型组成, 一个JobManager(作业管理器, Master进程)和一个或者多个TaskManager组成(任务管理器, slave进程)</p><pre class="mermaid">graph LR    A[JobManager] --> B[TaskManager]    A --> C[TaskManager]    A --> D[TaskManager]</pre><h2 id="Flink程序结构"><a href="#Flink程序结构" class="headerlink" title="Flink程序结构"></a>Flink程序结构</h2><p>Flink程序的基本结构块是流和转换, 从概念上讲, 流是数据记录的流, 而转换是将一个或者多个流作为一份或对各流的操作, 输入, 并产生一个或者多个数据流</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211112091257543.png"></p><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Source: 数据源, Flink在流处理和批处理的source大概有4类</p><blockquote><p>基于本地集合的Source</p><p>基于文件的Source</p><p>基于网络套接字的Source</p><p>自定义的Source</p></blockquote><p>自定义的Source常见的又Apache kafka, RabbitMQ等, 当然也可以定义自己的Source</p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><p>数据转化的各种操作, 又Map/FlatMap/Filter/KeyBy/Reduce/Fold/Aggregations/Window/WindowAll/Union/Window join/Split/Select等, 操作很多, 可以将数据转换计算成为你想要的数据</p><h3 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h3><p>接收器, Flink将转换计算后的数据发送的地点, 需要存储数据. Flink常见的Sink有如下几类: </p><ul><li>写入文件</li><li>控制台打印</li><li>写入socket</li><li>自定义sink</li></ul><p>自定义sink常见的有Apache kafka, RabbitMQ, MySQL,ElasticSearch, Apache Cassandra, HDFS等等, 我们也可以自定义属于自己的sink</p><h2 id="Flink并行数据流"><a href="#Flink并行数据流" class="headerlink" title="Flink并行数据流"></a>Flink并行数据流</h2><p>Flink程序在运行的时候, 会被映射成为一个StreamingDataflow, 一个Streaming Dataflow是一组Stream和Transformation Operator组成的. 在启动的时候从一个或者多个SourceOperator开始, 结束语一个或者多个Sink Operator.</p><h3 id="并行和分布式"><a href="#并行和分布式" class="headerlink" title="并行和分布式"></a>并行和分布式</h3><p><strong>Flink程序的本质上是并行的和分布式的,</strong> 在执行的过程中, 一个流(stream)包含一个或者多个流的分区, 而每一个operator包含一个或者多个operator子任务. 操作子任务之间是彼此独立的, 在不同的线程中执行, 甚至是在不同的机器或者不同的容器上. 而operator子任务的数量是这一特定Operator并行度. 相同程序中的不同operator有不同级别的并行度.</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211113141754.jpg"></p><p>一个Stream可以被分成多个Stream的分区, 也就是Stream Partition. 一个Operator也可以被分为多个Operator Subtask, 如图所示. Source被分成Source1和Source2, 它们分别是Source的Operator Subtask. <strong>每一个Operator Subtask都是在不同的线程当中独立运行的</strong>. 一个Operator的并行度, 就等于Operator Subtask的个数, 上图Source的并行度为2, 而一个Stream的并行度就等于它生成Operator的并行度</p><h3 id="One-to-One"><a href="#One-to-One" class="headerlink" title="One to One"></a>One to One</h3><p>两个operator用此模式传递的时候, 会保持数据的分区和数据的排序, 如上图的Source1到Map1, 它就会保留Source的分区特性, 以及分区元素处理的有序性.</p><h3 id="Redistributing"><a href="#Redistributing" class="headerlink" title="Redistributing"></a>Redistributing</h3><p>重新分配模式, 这种模式或改变数据的分区, 每一个operator subtask 会根据选择的transformation将数据发送到不同的目标subtasks, 比如keyBy()会通过hashcode重新分区, broadcast() 和 rebalance() 方法会随机重新分区.</p><h2 id="Task和-Operator-chain"><a href="#Task和-Operator-chain" class="headerlink" title="Task和 Operator chain"></a>Task和 Operator chain</h2><p>Flink的所有操作都称之为Operator, 客户端在提交任务的时候会对Operator进行优化操作, 能进行合并的Operator会被合并为一个Operator, <strong>合并后的Operator称为Operator chain, 实际上就是一个执行链, 每个执行链会在TaskManager上独立的线程中执行.</strong></p><p>对于分布式执行， Flink将算子的subtasks链接成为task。每个Task由一个线程执行， 将算子链接成为Task是个有用的优化：</p><blockquote><p>减少了线程间之间的切换， 缓冲的开销， 并且减少延迟的同时提升整体的吞吐量，链行为是可以配置的</p></blockquote><p>使用了5个SubTask执行， 因此存在5个<strong>并行</strong>的线程</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/tasks_chains.svg"></p><h2 id="Flink任务调度与执行"><a href="#Flink任务调度与执行" class="headerlink" title="Flink任务调度与执行"></a>Flink任务调度与执行</h2><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/processes.svg"></p><ol><li>Flink Program会将Program Dataflow通过Graph Builder构建Dataflow Graph</li><li>ActorSystem创建Actor将数据流图发送给JobManager中的Actor</li><li>JobManage会不断接受TaskManager的心跳信息, 从而可以获取到有效的TaskManager</li><li>JobManager通过调度器在TaskManager中调度执行Task(在Fllink中中最小的调度单元就是Task, 对应就是一个线程)</li><li>在程序运行的过程中, task与task之间是可以进行数据传输的</li></ol><blockquote><p>Client并不是运行时和程序执行的一部分， 而是用于准备数据流并将其发送给JobManager。 之后， 客户端可以断开链接（分离模式）， 或者保持链接来接受进程报告（附加模式）。</p><p>客户端可以作为出发执行Java/Scala程序的一部分运行， 亦可以在命令行进程<code>./bin/flink run ...</code>中运行</p><p>可以通过多种方式启动JobManager和TaskManager：</p><p>直接在机器上作为standalone集群启动， 在容器中启动， 或者通过yarn或者mesos等资源框架管理并启动， TaskManager连接到JobManager, 宣布自己可用， 并分配工作</p></blockquote><h3 id="JobClient"><a href="#JobClient" class="headerlink" title="JobClient"></a>JobClient</h3><ol><li>主要工作是提交任务, 提交之后可以结束进程, 也可以等待结果返回</li><li>JobClient不是Flink程序执行的内部部分, 但它是任务执行的起点</li><li>JobClient负责接受用户的程序代码, 然后创建数据流, 将数据流提交给JobManager以便进一步执行, 执行完毕之后, JobClient将结果返回给客户</li></ol><h3 id="JobManager"><a href="#JobManager" class="headerlink" title="JobManager"></a>JobManager</h3><p>作业管理器就是一个JVM进程, 其中包含三类线程</p><p>:chestnut:三类线程</p><ul><li>ResurceManager： Flink的资源管理器， 资源是任务插槽（Task Slot）</li><li>Dispatcher： 分发器，提供了Rest接口， 用于提交Flink应用程序， 并为每个Flink的应用程序启动一个新的JobMaster. 它还运行了FlinkWebUI用来提供作业的执行信息</li><li>JobMaster: 每个作业（Job）对应一个，负责管理单个JobGraph的执行， Flink中可以同时运行多个作业， 每个作业都有自己的JobMaster</li></ul><pre class="mermaid">graph LR    A[JobManager] --> B([ResourceManager])    A --> C([Dispatcher])    A --> D([JobMaster])</pre><p>:one:主要职责是调度工作并协调任务检查点</p><p>:two:集群中至少要存在一个master, master负责调度task, 协调checkpoints和容错</p><p>:three:高可用设置的话可以有多个master, 但是保证一个是leader, 其他是standby</p><p>:four:JobManager包含Actor System, Scheduler, CheckPoint三个重要的组件</p><p>:five:JobManager从客户端接收到任务之后, 首先生成优化过的执行计划, 再调度到TaskManager中进行执行</p><h3 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h3><ul><li>TaskSlot： 任务插槽， 是一个物理分区</li><li>不同的任务插槽就是不同的物理分区</li><li>每个任务插槽是一个内存分片</li><li>内存的本质是字节数组</li></ul><pre class="mermaid">graph LR    A[TaskManager] --> B([Task Slot])    A --> C([Task Slot])    A --> D([Task Slot])</pre><p>:one:主要职责是从JobManager处接收任务, 并部署启动, 接受上游的数据并处理</p><p>:two:TaskManager是在JVM中的一个或者多个线程中执行任务的工作节点</p><p>:three:TaskManager在创建之处就设置好了Slot, 每个Slot可以执行一个任务</p><h2 id="任务槽和槽共享"><a href="#任务槽和槽共享" class="headerlink" title="任务槽和槽共享"></a>任务槽和槽共享</h2><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/tasks_slots.svg"></p><p>每个TaskManager是一个JVM进程， 可以在不同的线程中执行一个或者多个子任务。 为了控制一个TaskManager能够接受多少个task。 TaskManager通过task slot进行控制， 一个TaskManager至少拥有一个task slot</p><h3 id="任务槽"><a href="#任务槽" class="headerlink" title="任务槽"></a>任务槽</h3><p>每个task slot表示TaskManager表示资源的一个固定大小的子集</p><p>Flink将进程的内存划分到多个slot中。</p><p>途中有两个TaskManager， 每个TaskManager有3个slot， 每个slot占用1/3的内存</p><p>内存被划分到不同的slot之后可以获得如下好处：</p><p>:one:TaskManager最多能同时并发执行的任务是可以控制的， 那就是3个， 因为不能超过slot的数量</p><p>:two:slot有独占的内存空间， 这样在一个TaskManager中可以运行多个不同的作业， 作业之间不会受到影响。</p><h3 id="槽共享"><a href="#槽共享" class="headerlink" title="槽共享"></a>槽共享</h3><p>默认情况下， Flink允许子任务共享插槽， 即使它们是不同task的subtask， 只要它们来自于同一个作业， 结果是一个slot可以保存作业的整个管道。 允许插槽共享有两个主要的好处：</p><p>:one:只需要计算Job最高并行度（parallelism）的task slot， 只要这个满足， 其他的job也可以满足</p><p>:two:资源分配更加的公平， 如果有比较空闲的slot可将更多的任务分配给他。 图中若没有任务槽共享， 负载不高的Source/Map等subtask将会占据许多的资源， 而负载较高的窗口subtask则会缺乏资源</p><p>:three:有了任务槽共享， 可以将基本并行度（base parallelism）从2提升至6， 提高了分配资源的利用率。 同时还可以保障TaskManager给subtask分配的slot方案更加的公平</p><h3 id="不同的DAG结构-有争议"><a href="#不同的DAG结构-有争议" class="headerlink" title="不同的DAG结构(有争议)"></a>不同的DAG结构(有争议)</h3><pre class="mermaid">graph LR    StreamGraph -->|客户端| JobGraph -->|作业管理器| ExecutionGraph -->|部署| PhysicalGraph</pre><ul><li><p>StreamGraph: 是根据用户通过Stream API编写的代码生成的最初的图, 用来表示程序的拓扑结构</p></li><li><p>JobGraph: StreamGraph 在编译阶段经过优化之后生成了JobGraph, 提交给JobManager的数据结构. 主要的有华为, 将多个符合条件(窄依赖, 没有shuffle, 并行度相同)的算组串联在一起作为一个节点, 保证串联起来的节点里面所有的算子都在同一个任务插槽执行, 这样算子之间的数据就是本地转发的(无序序列化和网络io), 需要两个条件</p><blockquote><ul><li>两个算子之间没有shuffle的存在</li><li>两个算子的并行度必须相同</li></ul></blockquote></li><li><p>ExecutionGraph: JobManager根据JobGraph生成ExecutionGraph, ExecutionGraph是JobGraph的并行化版本, 是调度曾最核心的数据结构</p></li><li><p>PhysicalGraph: JobManager根据ExecutionGraph对job进行调度之后, 在各个TaskManager上部署Task后形成的图 , 并不是具体的数据结构</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink-知识点</title>
      <link href="/2010/12/12/Flink-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2010/12/12/Flink-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍一下FLink"><a href="#简单介绍一下FLink" class="headerlink" title="简单介绍一下FLink"></a>简单介绍一下FLink</h2><p>&emsp;Flink是一个框架和分布式处理引擎, 用于对有界流和无界流进行有状态的计算. 并且Flink还提供了数据分布, 容错机制以及资源管理等核心功能. Flink提供了诸多高抽象层的API一边用户编写分布式任务. </p><p>&emsp;DataSet API, 对静态数据进行批处理操作, 将静态数据抽象成为分布式的数据集, 用户可以使用Flink提供的各种操作符对分布式数据集进行处理, 支持Java, Scala, Python</p><p>&emsp;DataStream API, 对于数据流进行流处理操作, 将流式的数据抽象成分布式的数据流, 用户可以方便的对分布式数据流进行各种操作, 支持Java和Scala</p><p>&emsp;Table API, 对结构化数据进行查询操作, 将结构化数据抽象成关系表, 并通过类SQL的DSL对辨析表进行各种查询操作, 支持Java和Scala</p><p>​    此外Flink还对特定的应用领域提供了领域库, 例如: Flink ML, Flink的机器学习库, 提供了机器学习Pipelines API并实现了多种机器学习算法, Gelly, Flink 的图计算库, 提供了图计算的相关API以及多种图计算算法实现. </p><h2 id="Flink和Spark-Streaming的区别"><a href="#Flink和Spark-Streaming的区别" class="headerlink" title="Flink和Spark Streaming的区别"></a>Flink和Spark Streaming的区别</h2><p>&emsp;Flink是标准的实时处理引擎, 基于事件驱动, 而Spark Streaming是为批处理模型(Micro-Batch)的模型.</p><p>🌰<strong>主要区别</strong></p><ol><li><p>架构模型</p><p>1️⃣ SparkStreaming在运行的时候的主要角色是: Master, Worker, Driver, Executor</p><p>2️⃣ Flink在运行时主要包含JobManager, TaskManager和Slot</p></li><li><p>任务调度</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/Hadoop-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2010/12/12/Hadoop-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HDFS-优化</title>
      <link href="/2010/12/12/HDFS-%E4%BC%98%E5%8C%96/"/>
      <url>/2010/12/12/HDFS-%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2010/12/12/Git/"/>
      <url>/2010/12/12/Git/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-分层</title>
      <link href="/2010/12/12/Interval-%E5%88%86%E5%B1%82/"/>
      <url>/2010/12/12/Interval-%E5%88%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><h1 id="数仓怎么建模"><a href="#数仓怎么建模" class="headerlink" title="数仓怎么建模"></a>数仓怎么建模</h1><ul><li><p>200张表</p></li><li><p>和业务人员(200张表是怎么产生的), 产品经理聊(未来统计哪些指标)</p><p>业务线: </p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-FLink</title>
      <link href="/2010/12/12/Interval-Hive/"/>
      <url>/2010/12/12/Interval-Hive/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-Hadoop</title>
      <link href="/2010/12/12/Interview-Hadoop/"/>
      <url>/2010/12/12/Interview-Hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="常用端口号"><a href="#常用端口号" class="headerlink" title="常用端口号"></a>常用端口号</h2><table><thead><tr><th></th><th>2.x</th><th>3.x</th></tr></thead><tbody><tr><td>HDFS端口</td><td>50070</td><td>9870</td></tr><tr><td>MR监控端口</td><td>8088</td><td>8088</td></tr><tr><td>历史服务器</td><td>19888</td><td>19888</td></tr><tr><td>客户端访问集群端口</td><td>9000</td><td>8020</td></tr></tbody></table><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><ol><li>首先提交MR程序到客户端所在的节点, 客户端向ResourceManager申请一个Application</li><li>ResourceManager返回客户端资源的提交路径并以application_id进行命名</li><li>客户端将对应的jar包, xml配置文件, 以及任务的切分规则上传到hdfs</li><li>当资源提交完毕之后, 向ResourceManager申请运行AplicationMaster</li><li>ResourceMananger将客户端的请求初始化为一个Task任务, 并放置到任务调度队列中, 等待NodeManager的领取</li><li>NodeManager从队列中获取到任务</li><li>NodeManager创建Container容器, 并根据Task的信息从hdfs上下载运行资源, 构建ApplicationMaster对象</li><li>ApplicationMaster根据文件的切片信息创建MapTask任务, 并以Task的形式提交到ResourceManager的队列中, NodeManager获取到MapTask任务, 构建Container对象, </li><li>ApplicationMaster向MapTask发送启动脚本, MapTask程序启动, 并将数据根据分区落盘</li><li>ApplicationMaster同时也提交了ReduceTask任务, 当MapTask执行到95%的时候, ReduceTask开始向MapTask拉取指定分区的数据, 计算并存储</li></ol></div></div><h2 id="Yarn调度器"><a href="#Yarn调度器" class="headerlink" title="Yarn调度器"></a>Yarn调度器</h2><h3 id="种类以及不同"><a href="#种类以及不同" class="headerlink" title="种类以及不同"></a>种类以及不同</h3><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p><strong>FIFO</strong></p><p>单队列 , 先进先出, 生产环境不会用</p><p><strong>Capacity Scheduler 容量调度器</strong> </p><p>多队列  可以借资源 优先选择资源占用率最低的队伍进行资源分配, 作业资源分配按照提交时间或者优先级进行分配. 容器的资源分配, 遵循本地原则</p><p><strong>Fair Scheduler 公平调度器</strong></p><p>多队列, 可以借资源, 保证每个任务公平的享用队列的资源, 资源不够的时候按照缺额进行分配.</p></div></div><h3 id="生产环境下怎么选择"><a href="#生产环境下怎么选择" class="headerlink" title="生产环境下怎么选择"></a>生产环境下怎么选择</h3><ul><li>如果对并发度要求比较高的情况下, 选择公平调度器, 但是要求服务器的性能较高</li><li>对于中小公司可以选择容量调度器</li></ul><h3 id="在生产环境怎么创建队列"><a href="#在生产环境怎么创建队列" class="headerlink" title="在生产环境怎么创建队列"></a>在生产环境怎么创建队列</h3><ol><li>调度器默认就一个default队列, 不能满足生产的要求</li><li>按照框架进行创建, 根据框架的不同放到不同的队列中, 比如hive, spark, flink</li><li>按照部门进行划分</li><li>按照不同的业务进行划分</li></ol><h3 id="创建对队列的好处"><a href="#创建对队列的好处" class="headerlink" title="创建对队列的好处"></a>创建对队列的好处</h3><ol><li>起到资源隔离的作用, 如果存在员工不小心写了递归死循环的代码, 避免将资源全部耗尽</li><li>实现任务降级, 在一定的场景下保证任务队列的资源充足</li></ol><h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><h2 id="读数据流程"><a href="#读数据流程" class="headerlink" title="读数据流程"></a>读数据流程</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><ol><li>首先HDFSClient会创建DistributedFileSystem, 去NameNode上获取要下载文件的块位置信息.</li><li>NameNode会根据客户端和存储文件的DataNode的位置信息返回给客户端对应的元数据信息</li><li>HDFSClient会根据文件的元数据信息, 选择最近的一台DataNode通过DFSDataInputStream请求文件读取, , 数据以packet为单位向客户端传输数据, 当一个数据块传输完毕之后, 会在元数据信息中获取下一个文件块的位置, 并建立连接进行数据传输.</li><li>当文件传输完毕之后, 客户端会调用close方法关闭DFSDataInputStream</li></ol></div></div><h2 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><ol><li><p>首先客户端创建DistributeFileSystem对象, 并向NameNode请求上传文件</p></li><li><p>NameNode根据请求文件的路径信息是否合法, 并响应客户端</p></li><li><p>当客户端收到NameNode允许上传的消息的时候, 会通过DistributeFileSystem向HDFS创建一个空的文件夹, 并且向NameNode请求上传第一个Block</p></li><li><p>NameNode根据副本配置信息以及节点的状态信息返回3个(N个)节点给客户端</p></li><li><p>客户端通过DFSDataOutputStream向离自己最近的一台节点DN1发起连接, DN1连接DN2, DN2连接DN3, 建立连接通道</p></li><li><p>当DN3连接成功之后, 应答DN2, 最后由DN1应答客户端, 说明连接成功了</p></li><li><p>客户端开始通过DFSDataOutputStream传输数据, 首先会数据写入内部的一个缓冲区, 之后数据会被切分成为Packet, 每个Packet的大小默认为64kb, 由PacketHeader, CheckSums, Data组成, 其中PacketHeader记录了包的一些属性信息, Data由n多个Chunk组成, 每个Chunk大小为512b, 每个Chunk对应着一个大小为4b的CheckSum, 这些CheckSum构成了Packet的CheckSums, 每个校验和都是校验块对应的和.</p><p>将Packet放到dataQueue中队列中, 之后由DFSOutputStream内部的DataStreamer发送器从队列中取出数据并发送到数据流管道上, 之后将发送的Packet从队列中移除并放到AckQueue中</p><p>当数据流管道接收到这个Packet之后, 会向PacketProcesser响应Ack, 当收到成功的Ack之后, 会从AckQueue中移除对应的Packet, 表示该Packet发送成功, 当数据块中的所有数据包都发送完毕, 会发送一个空包表示该数据块发送完毕</p><p>客户端写满一个数据块之后, 会向NameNode申请上传下一个数据块, 请求对应的DN, 直到全部的数据块写入完毕</p><p>当DataNode接收到一个数据块的时候就会向NameNode汇报信息, NameNode会更新文件和块的对应关系</p></li><li><p>当所有的文件传输完毕, 就可以关闭输出流了, 同时通知NameNode更新文件和块的信息, 完成了整个文件的写入操作</p></li></ol></div></div><h2 id="小文件处理"><a href="#小文件处理" class="headerlink" title="小文件处理"></a>小文件处理</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p><strong>影响</strong></p><ol><li><p>存储层面</p><p>一个文件块对应着一份元数据, 元数据占用NameNode 150字节</p></li><li><p>计算层面</p><p>每个小文件都对应着一个 MapTask, 而且每个MapTask的默认资源是1G, 会造成资源的浪费</p></li></ol><p><strong>解决</strong></p><ol><li>采用har归档的方式, 将小文件进行归档处理</li><li>使用CombineTextInputFormat</li><li>在有小文件的场景可以尝试开启JVM重用; 如果没有小文件, 不建议开启, 因为会占用Task卡槽.</li></ol></div></div><h2 id="NameNode的内存"><a href="#NameNode的内存" class="headerlink" title="NameNode的内存"></a>NameNode的内存</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>在Hadoop 2.x的时候, 默认是2000m</p><p>在Hadoop3.x的时候采用的是动态分配的方式, 默认大小是1G, 每当增加Block文件的数量达到100w之后, 会在原有内存的基础上增加1G</p></div></div><h2 id="NameNode心跳并发机制"><a href="#NameNode心跳并发机制" class="headerlink" title="NameNode心跳并发机制"></a>NameNode心跳并发机制</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>NameNode有一个线程池, 用来处理不同的DataNode的并发心跳以及客户端并发的元数据操作.</p><p>对于比较大的集群或者有大量的客户端的集群来说, 通常要调大这个参数, 默认值是10.</p><p>工作线程的个数设置参考公式:20*log<sub>e</sub><sup>Cluster Size</sup>, 比如集群的规模为3台, 则设置参数为21</p><p>修改hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>21<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h2 id="什么时候产生小文件"><a href="#什么时候产生小文件" class="headerlink" title="什么时候产生小文件"></a>什么时候产生小文件</h2><p>Flume 的 hdfs sink               </p><h2 id="纠删码原理和异构存储-空"><a href="#纠删码原理和异构存储-空" class="headerlink" title="纠删码原理和异构存储(空)"></a>纠删码原理和异构存储(空)</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h1>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> MapReduce </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-FLink</title>
      <link href="/2010/12/12/Interview-Flink/"/>
      <url>/2010/12/12/Interview-Flink/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><h2 id="Flink和SparkStreaming的区别"><a href="#Flink和SparkStreaming的区别" class="headerlink" title="Flink和SparkStreaming的区别"></a>Flink和SparkStreaming的区别</h2><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"><p>Flink时标准的实时引擎, 基于事件驱动, 而SparkSteaming是微批处理<br>框架的主要区别: </p><p>SparkStreaming框架的主要运行角色包括: Master, Worker, Driver,Executor</p><p>Flink在运行的时候主要包含</p></div></div>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-Kafka</title>
      <link href="/2010/12/12/Interview-Kafka/"/>
      <url>/2010/12/12/Interview-Kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>生产者,  消费者,  broker,  zk(broker ids, controller, isr)</p><blockquote><p>每一个broker都有一个controller</p></blockquote><h2 id="安装多少台"><a href="#安装多少台" class="headerlink" title="安装多少台"></a>安装多少台</h2><p>2 * (生产者峰值生产速率 * 副本 /100)+1</p><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><p>生产者峰值生产速率, 消费者峰值消费速率</p><h2 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h2><p>默认1个, 设置为2个</p><p>副本多的好处, 提高可靠性, 坏处是降低了效率</p><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p>100万日活 * 100条 = 1亿</p><p>1亿/(24 * 3600) = 1150条/s    每条1K,  1m/s</p><p>1亿 * 1k = 100G</p><p>1000万 * 1k = 10G</p><p>100万 * 1k = 1G</p><h2 id="是否做了监控"><a href="#是否做了监控" class="headerlink" title="是否做了监控"></a>是否做了监控</h2><p>eagle,  kafka manager(新版本要求jdk14)</p><blockquote><p>如果是自己研发的, 仰视大佬</p></blockquote><h2 id="分区设置为多少"><a href="#分区设置为多少" class="headerlink" title="分区设置为多少"></a>分区设置为多少</h2><p>期望的吞吐量  t</p><p>生产者峰值生产速率  tp  20m/s</p><p>消费者峰值消费速率  tc  40m/s</p><p>分区数 = t /min(tp, tc) = 100/20 = 5</p><blockquote><p>小公司为 3-5个分区</p></blockquote><h2 id="生产者-gt-broker"><a href="#生产者-gt-broker" class="headerlink" title="生产者 =&gt; broker"></a>生产者 =&gt; broker</h2><ol><li><p>指定分区, 按照指定的分区</p></li><li><p>没有指定分区, 指定了key, 按照可以的hash值%上分区数</p></li><li><p>没有key, 没有指定分区</p><p>粘性分区, 随机选择一个分区, 达到批次或者linger.ms()的时候, 切换下一个分区, 下一个分区不会是上一个分区</p></li></ol><h2 id="broker-gt-消费者"><a href="#broker-gt-消费者" class="headerlink" title="broker =&gt; 消费者"></a>broker =&gt; 消费者</h2><ol><li><p>range</p><p>10个分区            三个消费者</p><p>0  1  2  3                数据倾斜</p><p>4  5  6 </p><p>7  8  9</p><blockquote><p>45秒以内</p><p>0  1  2  3  7  8  9</p><p>4  5  6 </p><p>45秒以后</p><p>0  1  2  3  4 </p><p>5  6  7  8  9</p></blockquote></li><li><p>roundrobin  轮询</p><p>10个分区            三个消费者</p><p>0  3  6  9        </p><p>1  4  7</p><p>2  5  8</p><blockquote><p>45秒以后</p><p>0  3  6  9  2  8        </p><p>1  4  7  5</p></blockquote></li><li><p>粘性</p><p>10个分区            三个消费者</p><p>尽可能的均分        3 3 4</p><p>0  3  5 </p><p>2  6  9</p><p>1  4  7  8</p><blockquote><p>45秒以内挂了</p><p>0  3  5  1  7 </p><p>2  6  9  4  8</p></blockquote></li></ol><h1 id="挂了"><a href="#挂了" class="headerlink" title="挂了"></a>挂了</h1><h2 id="起不来了"><a href="#起不来了" class="headerlink" title="起不来了"></a>起不来了</h2><ol><li><p>整个集群瘫痪</p><p>后面的Flume消费不到数据, 影响不大. </p><p>前面的Flume如果采用的是memory channel的话可能会丢失100个event, 影响不大, 如果使用的是kafka channel, 当kafka挂掉之后, 无法发送数据, 没有任何意义, 如果使用的是taildir, 不会发生数据丢失, 当极端情况下可能会造成整个Flume的瘫痪, 但是我们的日志采集服务器日志默认保存30天, 问题不大.</p></li><li><p>一个节点挂了</p><p>3台服务器, 如果存在2个副本的情况下, 可以直接删除节点, 没有任何问题, 之后通过服役和退役.</p></li></ol><h2 id="节点没了"><a href="#节点没了" class="headerlink" title="节点没了"></a>节点没了</h2><p>只要副本是2, 一切好说. 如果是1, 需要带着历史数据启动. 服役退役</p><h1 id="丢了"><a href="#丢了" class="headerlink" title="丢了"></a>丢了</h1><p>ack 0 : 生产者发送的数据不需要应答, 可靠性低, 效率高, 生产环境几乎不用</p><p>ack 1 : 生产者发送过来的数据leader 应答, 可靠性一般, 效率一般</p><p>ack -1: 生产者发送过来的数据 leader + irs队列中 follower应答</p><p>​            leader 0 [0,1]</p><p>​            isr默认保存的值, 1 -&gt; 设置为大于等于2</p><p>​            副本数量大于等于2</p><h1 id="重复了"><a href="#重复了" class="headerlink" title="重复了"></a>重复了</h1><h2 id="生产者-gt-Broker"><a href="#生产者-gt-Broker" class="headerlink" title="生产者  ==&gt; Broker"></a>生产者  ==&gt; Broker</h2><p>幂等性就是指Producer不论向Broker发送多少次重复数据, Broker端都只会持久化一条, 保证了不重复, 结合上至少一次, 就构成了Kafka的精准一次消费</p><blockquote><p><strong>精准一次消费:</strong> </p><p><code>幂等性</code>+ <code>至少一次(ack = -1 + 分区副本数 &gt;= 2 + ISR最小副本数量 &gt;=2)</code></p></blockquote><p>生产者向broker发送消息是通过</p><p>判断的key (pid (每次启动会更新一次),  分区,  序列号)</p><p>幂等性    =&gt; 指的是单分区, 但绘画数据不丢不重复</p><p>事务        =&gt; </p><ul><li>初始化事务</li><li>开启事务</li><li>提交事务</li><li>终止事务</li><li>offset提交事务</li></ul><h2 id="Broker-gt-消费者"><a href="#Broker-gt-消费者" class="headerlink" title="Broker  ==&gt; 消费者"></a>Broker  ==&gt; 消费者</h2><p>事务</p><h1 id="积压了"><a href="#积压了" class="headerlink" title="积压了"></a>积压了</h1><ol><li><p>增加分区数量</p><blockquote><p>bin/kafka-topic.sh –bootstrap-server Hadoop102:9092 –alter –topic first  –partitions  6</p></blockquote></li><li><p>kafka的分区增加了, 但是对应的消费者并没有增加, 这里我们要增加对应cpu数量, 和kafka的分区数相对应, 进行消费数据</p></li><li><p>调高消费者每批次抓取条数大小, 默认为500条, 默认批次大小为55m, 可以尝试提高批次大小和处理批次的条数, 增加吞吐量.</p></li></ol><h1 id="乱序了"><a href="#乱序了" class="headerlink" title="乱序了"></a>乱序了</h1><ul><li><p>kafka  1.x</p><p>不需要考虑是否开启幂等性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max.in.flight.requests.per.connection = 1</span><br></pre></td></tr></table></figure></li><li><p>kafka  1.x以后的版本</p><p>在未开启幂等性的情况下, 和1.x的版本一样处理</p><p>在开启幂等性的情况下, 会缓存producer发来的最近5个request的数据</p><p>需要设置缓存的请求个数小于等于5个, 会在服务器端从新排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max.in.flight.requests.per.connection # 设置参数小于等于5</span><br></pre></td></tr></table></figure></li></ul><h1 id="做了哪些优化"><a href="#做了哪些优化" class="headerlink" title="做了哪些优化"></a>做了哪些优化</h1><h1 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h1><h1 id="提高吞吐量"><a href="#提高吞吐量" class="headerlink" title="提高吞吐量"></a>提高吞吐量</h1><h1 id="为什么能做到高校读写"><a href="#为什么能做到高校读写" class="headerlink" title="为什么能做到高校读写"></a>为什么能做到高校读写</h1>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-Linux</title>
      <link href="/2010/12/12/Interview-Linux/"/>
      <url>/2010/12/12/Interview-Linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境编程：从应用到内核</title>
      <link href="/2010/12/12/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%BA%94%E7%94%A8%E5%88%B0%E5%86%85%E6%A0%B8/"/>
      <url>/2010/12/12/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%BA%94%E7%94%A8%E5%88%B0%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h1><h2 id="Linux中的文件"><a href="#Linux中的文件" class="headerlink" title="Linux中的文件"></a>Linux中的文件</h2><h3 id="文件-文件描述符和文件表"><a href="#文件-文件描述符和文件表" class="headerlink" title="文件, 文件描述符和文件表"></a>文件, 文件描述符和文件表</h3><p>&emsp;Linux内核将一切视为文件, Linux上的文件既可以是事实上的真正的物理文件, 也可以设备, 管道, 甚至还可以是一块内存. 狭义的文件是指文件系统中的物理文件, 而广义的文件则是Linux管理的所有对象. 这些广义的文件利用VFS机制, 以文件系统的形式挂载在Linux内核中, 对外提供一致的文件操作接口.</p><p>&emsp;从数值上看, 文件描述符就是一个非负的整数, 其本质上就是一个句柄, 所以也可以认为文件描述符就是一个文件的句柄. 那么, 什么是句柄呢? 一切对于用户透明的返回值, 即可以视为是句柄. 用户空间利用文件描述符与内核进行交互, 而内核拿到文件描述符之后, 可以通过它得到用于管理文件的真正的数据结构.</p><p><strong>&emsp;使用文件描述符也就是句柄</strong>, 有两个好处: 一是增加了安全性, 句柄类型对于用户完全透明, 用户无法通过任何hacking的方式, 缸盖句柄对应的内部结果, 比如Linux内核的文件描述符, 只有内核才能通过该值得到对应的文件结构; 二是增加可可扩展性, 用户的代码只依赖与句柄的值, 这样实际结构的类型就可以随时发生变化, 与句柄的映射关系也可以随时发生改变, 这些变化都不会影响任何现有的用过户代码. </p><p>&emsp;Linux的每个进程都会维护一个文件表, 以便维护该进程打开文件的信息, 包括打开的文件个数, 每个打开文件的偏移量等信息. </p><h3 id="内核文件表的实现"><a href="#内核文件表的实现" class="headerlink" title="内核文件表的实现"></a>内核文件表的实现</h3><p>内核中进程对应的结构是task_struct, 进程的文件表保存在task_struct -&gt; files中</p><p>files_struct是如何使用默认的fdtab和fd_array的, init是Linux的第一个进程, 它的文件表是一个全局变量, 代码如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct  files_struct  init_files  =  &#123;</span><br><span class="line">.count=  ATOMIC_INIT(1),</span><br><span class="line">.fdt=  &amp;init_files.fdtab,</span><br><span class="line">.fdtab=  &#123;</span><br><span class="line">.max_fds=  NR_OPEN_DEFAULT,</span><br><span class="line">.fd=  &amp;init_files.fd_array[0],</span><br><span class="line"></span><br><span class="line">.close_on_exec    =  (fd_set  *)&amp;init_files.close_on_exec_init,</span><br><span class="line">.open_fds=  (fd_set  *)&amp;init_files.open_fds_init,</span><br><span class="line">&#125;,</span><br><span class="line">.file_lock    =      SPIN_LOCK_UNLOCKED(init_task.file_lock),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用-公式符号</title>
      <link href="/2010/12/12/Markdown%E4%BD%BF%E7%94%A8-%E5%85%AC%E5%BC%8F%E7%AC%A6%E5%8F%B7/"/>
      <url>/2010/12/12/Markdown%E4%BD%BF%E7%94%A8-%E5%85%AC%E5%BC%8F%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档编辑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Interview-FLink</title>
      <link href="/2010/12/12/Interview-Leetcode/"/>
      <url>/2010/12/12/Interview-Leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview-Zookeeper</title>
      <link href="/2010/12/12/Interview-Zookeeper/"/>
      <url>/2010/12/12/Interview-Zookeeper/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6888aace34deef44e292d961b152507b7b82cc6d5d852c6736498465ead1bc1e">d3e6c873a0c2a163e561e7b8a7ba8ea9daf22ff94a96d44f65b7db52ff35e6a7d3f6ce60753b1d58923e180f01eece0674729660f3067740dc415dc19a29209bfba154504cb6ad153895d27c2355005a346bc0624ede0a408bbe6a30d3a6d7156b2249839cebb6bdfea3a37e51c73da783bd9d368b00749fe80ddaccc1310e520dde4367dab428929a47aeb4508df2f06ad04b716a0fba4c235dbc783f0faf90f4027e4a8b817e77b7ad31da6db0610e0c1a0320dfbcddf7a350e23da32a927f61a23680f2b4c5dbfe7948bf3a4f16dc8ca49582585c53679e4e0a30ca5383389ccd43eeb464dbcd1908d5dad50aab246a29e4aee27b1bdae70d7ea1ba898159c1204b99993b0d3ff87c53f3ba03119b0c9c038248f93e10fa29cbee9820775900b3d7b30648d1b167dee99aa4763c5bfa02931263f54246c17fad6db4f4b4ca4c0015650ce69f757b4620422b71c1db5775313ff544341175ed35051c8813ea9acdb1c0b39e1c8fcb4f06c2af542a512de922e7290825f11ce1f65d1a9a5c75eda3b3fa33a54645bf8c47b7700a2682914e065488927f6de48761dc626e4068313a46693a772036b199813383a0a5c7ababaffdcae778c76f3e881c8ef79c6a17289f62fefbf2fa9274b3b3a79fe276b54c257d0edf7c7325b7706940ad1be9d962787b645498c8861e2589c338e0a62a47fe3da881bee14358599dda7547f641088d1c04af791a4a6dcdb1a38bad673752f9de1d58b8f2288ccd1d21a4090aeafc300ac43b4dbd21c5209817b0c9f718cf27e8a9a7ce708a0989af695bd70c3f95683d7df4edca4bc7ef1a52051ff374942e5889bf36dc73a9b0364f932fdd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty, Redis, Zookeeper高并发实战(阅读中)</title>
      <link href="/2010/12/12/Netty,%20Redis,%20Zookeeper%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AE%9E%E6%88%98,%20/"/>
      <url>/2010/12/12/Netty,%20Redis,%20Zookeeper%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AE%9E%E6%88%98,%20/</url>
      
        <content type="html"><![CDATA[<h1 id="高并发时代的必备技能"><a href="#高并发时代的必备技能" class="headerlink" title="高并发时代的必备技能"></a>高并发时代的必备技能</h1><p>&emsp;&emsp;高并发时代已然到来, Netty, Redis, Zookeeper是高并发时代的必备工具.</p><h2 id="Netty为何这么火"><a href="#Netty为何这么火" class="headerlink" title="Netty为何这么火"></a>Netty为何这么火</h2><p>&emsp;&emsp;Netty是JBOOS提供的一个Java开源框架, 是基于NIO的客户端, 服务器编程框架, 它既能快速开发高并发, 高可用 , 高可靠性的网络服务器程序, 也能开发高可用, 高可靠的客户端. </p><blockquote><p>NIO是指非阻塞输入输出(Non-Blocking IO), 也称非阻塞IO.</p></blockquote><h2 id="高并发利器Redis-空"><a href="#高并发利器Redis-空" class="headerlink" title="高并发利器Redis(空)"></a>高并发利器Redis(空)</h2><h2 id="分布式利器Zookeeper-空"><a href="#分布式利器Zookeeper-空" class="headerlink" title="分布式利器Zookeeper(空)"></a>分布式利器Zookeeper(空)</h2><h2 id="高并发IM的综合实践-空"><a href="#高并发IM的综合实践-空" class="headerlink" title="高并发IM的综合实践(空)"></a>高并发IM的综合实践(空)</h2><h2 id="Netty-Redis-Zookeeper实践计划-空"><a href="#Netty-Redis-Zookeeper实践计划-空" class="headerlink" title="Netty, Redis, Zookeeper实践计划(空)"></a>Netty, Redis, Zookeeper实践计划(空)</h2><h2 id="本章小结-空"><a href="#本章小结-空" class="headerlink" title="本章小结(空)"></a>本章小结(空)</h2><h1 id="高并发IO的底层原理"><a href="#高并发IO的底层原理" class="headerlink" title="高并发IO的底层原理"></a>高并发IO的底层原理</h1><h2 id="IO读写的基本原理"><a href="#IO读写的基本原理" class="headerlink" title="IO读写的基本原理"></a>IO读写的基本原理</h2><p>&emsp;大家知道, 用户程序在进行IO读写的时候, 依赖于底层的IO读写, 基本上会用到底的read&amp;write两大系统调用. 在不同的操作系统中, IO读写的系统调用的名称可能不完全一样, 但是基本功能是一样的.</p><p>&emsp;这里设计一个基础只是: read系统调用, 并不是直接从物理设备把数据读取到内存中; write系统调用, 也不是直接把数据写入到物理设备中. 上层应用无论是调用操作系统的read, 还是调用操作系统的write, 都会涉及缓冲区. <strong>具体来说, 调用操作系统的read, 是把数据从内核缓冲区复制到进程缓冲区; 而write系统调用, 是把数据从进程缓冲区复制到内存缓冲区.</strong></p><p>&emsp;也就是说, <strong>上层程序的IO操作, 实际上不是物理设备级别的读写, 而是缓存的复制.</strong> read&amp;write两大系统的调用, 都不负责数据在内核缓冲区和物理设备(如磁盘)之间的交换, 这项底层的读写交换, 是由操作系统内核(Kernel)来完成的. </p><p>&emsp;在用户程序中, 无论是Socket的IO, 还是文件的IO操作, 都属于上层应用的开发, 它们的输入(Input)和输出(Output)的处理, 在编程的流程上, 多是一致的.</p><h3 id="内核缓冲区与进程缓冲区"><a href="#内核缓冲区与进程缓冲区" class="headerlink" title="内核缓冲区与进程缓冲区"></a>内核缓冲区与进程缓冲区</h3><p>&emsp;为什么设置那么多的缓冲区, 为什么要那么麻烦呢? 缓冲区的目的是为了减少频繁地与设备之间的物理交换. 大家都知道, 外部设备的直接读写, 涉及操作系统的中断. <strong>发生系统中断时, 需要保存之前的进程数据和状态等信息, 而结束中断之后, 还需要恢复之前的进程数据和状态等信息, 为了减少这种底层系统的时间损耗, 性能损耗, 于是出现了缓冲区.</strong> </p><p>&emsp;有了内存缓冲区, 上层应用使用read系统调用的时候, 仅仅是把数据从内核缓冲区复制到上层应用的缓冲区(进程缓冲区) ;上层应用使用write系统调用时, 仅仅把数据从进程缓冲区复制到内核缓冲区中. 底层操作会对内核缓冲区进行监控, 等待缓冲区达到一定数量的时候, 再进行IO设备的中断处理, 集中执行物理设备的实际IO操作, 这种机制提升了系统的性能. 至于什么时候中断(读中断, 写中断), 由操作系统的内核来决定, 用户程序则不需要关心</p><p>&emsp;从数量上来说, **在Linux系统中, 操作系统内核只有一个内核缓冲区. 而每个用户程序(进程), 有自己独立的缓冲区, 叫做进程缓冲区. **所以, 用户程序的IO读写程序, 在大多数情况下, 并没有进行实际的IO操作, 而是在进程缓冲区和内核缓冲器之间进行数据的交换.</p><h3 id="详解典型的系统调用流程"><a href="#详解典型的系统调用流程" class="headerlink" title="详解典型的系统调用流程"></a>详解典型的系统调用流程</h3><p>&emsp;前面讲到, 用户程序所使用的系统调用read&amp;write, 它们不等价于数据在内核缓冲区和磁盘时间的交换. read把数据从内核缓冲区复制到进程缓冲区, write把数据从进程缓冲区复制到内核缓冲区, 具体执行流程如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211203145059416.png"></p><p>(空)</p><h2 id="四种主要的IO模型"><a href="#四种主要的IO模型" class="headerlink" title="四种主要的IO模型"></a>四种主要的IO模型</h2><p>&emsp; 服务器编程, 经常需要构造高性能的网络服务器, 需要寻用高性能的IO模型, 这也是通关大公司面试必备的知识</p><p>&emsp;本章从最为基础的模型开始吗, 为大家揭秘IO模型, 常见的IO模型有四种: </p><ul><li><p>同步阻塞IO(Blocking IO)</p><p>&emsp;首先, 解释一下这里的阻塞与非阻塞</p><p><strong>&emsp;阻塞IO, 指的是需要内核IO操作彻底完成之后, 才返回到用户空间执行用户的操作</strong>. 阻塞指的是用户空间程序的执行状态. 传统的IO模型都是同步阻塞. 在Java中, 默认创建的socket都是阻塞的.</p><p>&emsp;解释一下同步与异步:</p><p><strong>&emsp;同步IO, 是一种用户空间与内核空间的IO发起方式. 同步IO是指有用户空间的线程时主动发起IO请求的一方, 内核空间是被动接收方. 异步IO则反过来, 是指系统内核时主动发起请求的一方, 用户空间的线程时被动接收方.</strong></p></li><li><p>同步非阻塞IO(Non-blocking IO)</p><p><strong>&emsp;非阻塞IO, 指的是用户空间的程序不需要等待内核IO操作彻底完成, 可以立即返回用户空间执行用户的操作, 也就是处于非阻塞状态, 与此同时内核会立即返回给用户一个状态值.</strong> </p><p><strong>&emsp;简单来说, 阻塞是指用户空间(调用线程)一直等待, 而不能干别的事情; 非阻塞是指用户空间(调用线程)拿到内核返回的状态值就返回自己的空间, IO操作可以干就干, 不可以干, 就去干别的事情</strong></p><p>&emsp;非阻塞IO要求socket被视之为NONBLOCK</p><p>&emsp;强调一下, 这里说的NIO指的是同步非阻塞IO, 并不是Java的NIO, Java的NIO指的时New IO</p></li><li><p>IO多路复用 (IO Multiplexing)</p><p>&emsp;即经典的Reactor反应器设计模式, 有的时候也被称为异步IO, Java中的Selector选择器和Linux中的epoll都是这种设计模式</p></li><li><p>异步IO (Asynchronous IO)</p><p>&emsp;异步IO, 指的是用户空间与内核空间的调用方式反过来. 用户空间的线程变成了被动接受者, 而内核空间成为了主动调用者. 这有点类似与Java中比较典型的回调模式, 用户空间的向内核空间注册了各种IO时间的回调函数, 由内核去主动调用</p><blockquote><p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p></blockquote></li></ul><h3 id="同步阻塞IO-Blocking-IO"><a href="#同步阻塞IO-Blocking-IO" class="headerlink" title="同步阻塞IO (Blocking IO)"></a>同步阻塞IO (Blocking IO)</h3><p>​    在Java应用程序进程中, 默认情况下, 所有的socket连接的的IO操作都是同步阻塞IO(Blocking IO)</p><p>&emsp;在阻塞式IO模型中, Java程序从IO系统调用开始, 直到系统调用返回, 在这段时间内, Java进程是阻塞的, 返回成功结果之后, 应用程序开始处理用户空间的缓存区数据</p><p>&emsp;同步阻塞IO的具体流程, 如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/image-20211210135759780.png"></p><p>&emsp;举个例子, 在Java中发起一个socket的read读操作的系统调用, 流程大致如下:</p><ul><li>从Java启动IO读的read系统调用开始, 用户线程就进入阻塞状态</li><li>当系统内核收到read系统调用, 就开始准备数据, 一开始, 数据可能还没有到达内核的缓冲区(比如, 还没有收到一个完整的socket包), 这个时候内核就需要等待</li><li>内核一直到等待知道完整的数据到达, 就会将</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> Netty </tag>
            
            <tag> Redis </tag>
            
            <tag> 同步 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 阻塞 </tag>
            
            <tag> 非阻塞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok</title>
      <link href="/2010/12/12/StringUtils/"/>
      <url>/2010/12/12/StringUtils/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2010/12/12/Redis/"/>
      <url>/2010/12/12/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>redis是一个开源的key-value存储系统</li><li>和memcached一样的, 为了保证数据的效率, 所以数据保存在内存中</li><li>和memcached类似, 它支持的存储的value类型更加的多, 包括string, list, set, zset</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis知识点</title>
      <link href="/2010/12/12/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2010/12/12/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5d6b866930faf044c2779af3752d14ff16c8aeeeb6a2c8aadfaa5755ecb03730">4630436162ade97ba2718b7d0c4b3b63b82145efa12db6f9895ffd0d68bba8e3cf73871a2c8024b554d393252d376a66</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广告数仓</title>
      <link href="/2010/12/12/%E5%B9%BF%E5%91%8A%E6%95%B0%E4%BB%93/"/>
      <url>/2010/12/12/%E5%B9%BF%E5%91%8A%E6%95%B0%E4%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>术语</title>
      <link href="/2010/12/12/%E4%B8%93%E4%B8%9A%E5%90%8D%E8%AF%8D/"/>
      <url>/2010/12/12/%E4%B8%93%E4%B8%9A%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h2><p>VFS（virtual File System）的作用就是采用标准的Unix系统调用读写位于不同物理介质上的不同文件系统,即为各类文件系统提供了一个统一的操作界面和应用编程接口。VFS是一个可以让open()、read()、write()等系统调用不用关心底层的存储介质和文件系统类型就可以工作的粘合层。<a href="https://baike.baidu.com/item/VFS/7519887?fr=aladdin">百度百科</a></p><h2 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h2><p>句柄（Handle）是一个是用来标识对象或者项目的标识符，可以用来描述窗体、文件等，值得注意的是句柄不能是常量 。</p><p>Windows之所以要设立句柄，根本上源于内存管理机制的问题，即虚拟地址。简而言之数据的地址需要变动，变动以后就需要有人来记录、管理变动，因此系统用句柄来记载数据地址的变更。在程序设计中，句柄是一种特殊的智能指针，当一个应用程序要引用其他系统（如数据库、操作系统）所管理的内存块或对象时，就要使用句柄 。</p><p><a href="https://baike.baidu.com/item/%E5%8F%A5%E6%9F%84">百度百科</a></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azkaban</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Azkaban/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Azkaban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azkaban </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataX</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-DataX/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-DataX/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-ElasticSearch/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-ElasticSearch/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-HBase/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-HBase/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-HDFS/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-HDFS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Git/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Git/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Hive/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Hive/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置信息</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-IDEA-%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-IDEA-%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hudi</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Hudi/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Hudi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hudi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kafka/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kafka/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doris</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Doris/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Doris/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Doris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kibana/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kibana/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kylin</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kylin/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Kylin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kylin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Linux/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Lombok/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Lombok/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 常用类库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Logstash</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Logstash/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Logstash/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Maven/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Maven/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Redis/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Redis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Presto/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Presto/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Shell/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Shell/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Scala/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Scala/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Sqoop/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Sqoop/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Yarn/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Yarn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Spark/"/>
      <url>/2010/12/12/%E5%BE%85%E8%A1%A5%E5%85%85-Spark/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx&amp;Tengine</title>
      <link href="/2010/12/12/%E8%BF%9B%E8%A1%8C%E4%B8%AD-Nginx&amp;Tengine/"/>
      <url>/2010/12/12/%E8%BF%9B%E8%A1%8C%E4%B8%AD-Nginx&amp;Tengine/</url>
      
        <content type="html"><![CDATA[<p><strong>参考引用文章</strong></p><ul><li>深入理解Nginx模块开发与架构解析第2版</li></ul><h1 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h1><p>​    Nginx是一个阔平台的web服务器, 可以运行在Linux, FreeBSD, Solaris, AIZ, MacOS, Windows等操作系统上, 并且它还可以使用当前操作系统特有的一些高效api来提高自己的性能.</p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><h2 id="Nginx进程之间的关系"><a href="#Nginx进程之间的关系" class="headerlink" title="Nginx进程之间的关系"></a>Nginx进程之间的关系</h2><p>在正式提供服务的产品环境下, 部署Nginx时都是使用一个master进程来管理多个worker进行, 一般情况下, worker进行的数量与服务器上cpu核心数量是相等的. 每一个worker进程都是繁忙的, 是真正地为互联网服务的, master是比较”清闲的”, 只负责监控管理worker进行, worker进程之间通过共享内存, 原子操作等一些进程通信机制来实现负载均衡等功能</p><h2 id="Nginx服务的基本配置-待补充"><a href="#Nginx服务的基本配置-待补充" class="headerlink" title="Nginx服务的基本配置(待补充)"></a>Nginx服务的基本配置(待补充)</h2><p>Nginx的配置文件其实就是一个普通的文本文件</p><h2 id="用HTTP核心模块配置一个静态web服务器-待补充"><a href="#用HTTP核心模块配置一个静态web服务器-待补充" class="headerlink" title="用HTTP核心模块配置一个静态web服务器(待补充)"></a>用HTTP核心模块配置一个静态web服务器(待补充)</h2><h2 id="用Http-proxy-module配置一个反向代理服务器"><a href="#用Http-proxy-module配置一个反向代理服务器" class="headerlink" title="用Http proxy module配置一个反向代理服务器"></a>用Http proxy module配置一个反向代理服务器</h2><p>​    反向代理， 是指用代理服务器来接受Internet上的连接请求， 然后将请求转发给内部网络中的上游服务器， 并将从上游服务器上得到的结果返回给Internet上请求连接的客户端， 此时代理服务器对外的表现就是一个web服务器， 充当反向代理服务器也是Nginx的一种常见的方法</p><p>​    由于Nginx具有“强悍的”的高并发和高负载能力， 因此一般会作为前端的服务器直接向客户端提供静态文件服务。</p><p>​    但是也有一些复杂， 多变的业务不适合放到Nginx服务器上, 这时会使用Apache, Tomcat等服务器来进行处理. 于是Nginx通常会被配置为既是静态web服务器, 也是反向代理服务器, 不适合Nginx处理的请求就会直接转发到上游服务器中进行处理.</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/Snipaste_2021-11-23_16-48-15.jpg"></p><p>​    与Squid等反向代理服务器相比, Nginx的反向代理服务器有着自己的特点</p><p><img src="https://cdn.jsdelivr.net/gh/quietCC/imageBed/img/Snipaste_2021-11-23_16-50-07.jpg"></p><p>​    当客户端发来HTTP请求的时候, Nginx并不会立刻转发到上游服务器中, 而是先将用户的请求, 包括HTTP包体完整地接收到Nginx所在服务器的硬盘或者内存中, 然后再向上游服务器发起连接, 将缓存的客户端请求转发到上游服务器中, 而Squid等代理服务器则采用一边接受客户端请求, 一边转发到上游服务器的方式.</p><p>​    这种方式的缺点是延长了一个请求的处理事件, 并且增加了用户缓存请求内容的内存和磁盘的空间, 而有点事降低了上游服务器的负载, 尽量将压力放在Nginx服务器上.</p><p>​    Nginx的这种工作方式为什么会降低上游服务器的负载呢? 通常, 客户端与代理服务器之间的网络环境会比较复杂, 多半是”走”公网, 网速平均下来可能会比较慢, 一次一个请求可能要持续很久才能完成. 而代理服务器与上游服务器之间一般是”走”内网, 或者专有连接, 传输速度快. Squid等反向代理服务器</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2010/12/12/%E8%BF%9B%E8%A1%8C%E4%B8%AD-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2010/12/12/%E8%BF%9B%E8%A1%8C%E4%B8%AD-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>参考引用链接</strong></p><ul><li>正则表达式必知必会（人民邮电出版社）</li><li><a href="https://github.com/quietCC/learn-regex/blob/master/translations/README-cn.md#learn-regex">The Easy Way Learn Regex</a></li></ul><h1 id="正则入门"><a href="#正则入门" class="headerlink" title="正则入门"></a>正则入门</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>正则表达式（regular expression， 简称regex）是一种工具， 由文本和特殊指令构成的高度简练的字符串实现匹配。</p><blockquote><p>正则表达式起源于1950年代在数学领域的一些研究用作， 几年后， 计算机领域借鉴那些研究工作的成果和思路开发出了Unix世界里面的Perl语言和grep等工具程序。 在许多年里， 正则表达式只流行于Unix平台， 但是这种情况早已发生变化， 现在几乎所有的计算机平台都支持正则表达式。 只是具体的方式和支持的成都由略微的差异。</p></blockquote><h1 id="基本匹配"><a href="#基本匹配" class="headerlink" title="基本匹配"></a>基本匹配</h1><p>正则表达式其实就是在执行搜索时的格式， 它是由一些字母和数字组合而成的。例如：一个正则表达式<code>the</code>, 它表示一个规则： 由字母<code>t</code>开始，之后是<code>h</code>, 最后是<code>e</code>。</p><table><thead><tr><th>“the” =&gt; The fat cat sat on <a href="">the</a> mat</th></tr></thead></table><p>正则表达式123匹配123， 它逐个字符的与输入的正则表达式作比较， 正则表达式是大小写敏感的， 所以<code>The</code>是不会匹配<code>the</code>的。</p><table><thead><tr><th>“The” =&gt; <a href="">The </a>fat cat sat on the mat</th></tr></thead></table><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>正则表达式主要依赖于元字符。 元字符不代表他们本身的字面意思， 他们都有特殊的含义。 一些元字符在方括号中的时候有一些特殊的意思。</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>,</td><td>句号匹配任意单个字符除了换行符</td></tr><tr><td>[]</td><td>字符种类。 匹配方括号内的任意字符</td></tr><tr><td>[^ ]</td><td>否定的字符种类。 匹配除了方括号里的任意字符</td></tr><tr><td>*</td><td>匹配&gt;=0个重复的在*号之前的字符</td></tr><tr><td>+</td><td>匹配&gt;=1个重复的在+之前的字符</td></tr><tr><td>？</td><td>标记？之前的字符为可选</td></tr><tr><td>{n,m}</td><td>匹配num个大括号之前的字符或者字符集</td></tr><tr><td>(xyz)</td><td>字符集， 匹配与xyz完全相等的字符串</td></tr><tr><td>|</td><td>或运算符， 匹配符号之前或者符号之后的字符</td></tr><tr><td>\</td><td>转义字符，用于匹配一些保留字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ </code></td></tr><tr><td>^</td><td>从开始行开始匹配</td></tr><tr><td>￥</td><td>从末端开始匹配</td></tr></tbody></table><h2 id="点运算符"><a href="#点运算符" class="headerlink" title="点运算符 ."></a>点运算符 .</h2><p><code>.</code>是元字符中最简单的例子, <code>.</code>匹配任意<strong>单字符</strong>， 但是不匹配换行符，例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串</p><table><thead><tr><th>“.ar” =&gt; The <a href="">car</a> <a href="">par</a>ked in the <a href="">gar</a>age</th></tr></thead></table><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集也叫做字符类, 方括号用来指定一个字符集. 在方括号中使用连字符执行字符集的范围. 在方括号中的字符集不关心顺序, 例如<code>[Tt]he</code>匹配<code>the</code>和<code>The</code></p><table><thead><tr><th>“[Tt]he” =&gt; <a href="">The</a> car parked in <a href="">the</a> garage.</th></tr></thead></table><p>方括号的句号就是句号, 表达式<code>ar[.]</code>匹配<code>ar.</code></p><table><thead><tr><th>“ar[.]” =&gt; A garage is a good place to park a c<a href="">ar.</a></th></tr></thead></table><h2 id="否定字符集"><a href="#否定字符集" class="headerlink" title="否定字符集"></a>否定字符集</h2><p>一般来说<code>^</code>表示一个字符串的开头, 但是在一个方括号的开头中, 表示这个字符集是否定的. 例如表达式<code>[^c]ar</code>匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符</p><table><thead><tr><th>“[^c]ar” =&gt; The car <a href="">par</a>ked in the <a href="">gar</a>age.</th></tr></thead></table><h2 id="重复次数"><a href="#重复次数" class="headerlink" title="重复次数"></a>重复次数</h2><p>后面跟着元字符<code>+</code>,<code>*</code>或者<code>?</code>的, 用来指定匹配子模式的次数, 这些元字符在不同的情况下有着不同的意思</p><h3 id="号"><a href="#号" class="headerlink" title="*号"></a><code>*</code>号</h3><p><code>*</code>号匹配在<code>*</code>之前的字符出现<strong>大于等于0次</strong>, 例如, 表达式<code>a*</code>匹配0或者跟多个以a开头的字符. 表达式<code>[a-z*]</code>匹配一个行中所有以小写字母开头的字符串</p><table><thead><tr><th>“[a-z]*” =&gt; T<a href="">he car parked in the garage</a> #21.</th></tr></thead></table><p><code>*</code>和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>, <code>*</code>和表示匹配空格的符号<code>\s</code>连起来用</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interval-Hive</title>
      <link href="/2010/12/12/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2010/12/12/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span><b>查看答案</b></span></div>    <div class="hide-content"></div></div><p>#与mysql的区别</p><p>#内部表和外部表的区别</p>]]></content>
      
      
      <categories>
          
          <category> Interval </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interval </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
